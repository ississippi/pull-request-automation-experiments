{
"snippets": [
	{
		"id" : 190196,
		"snippet" : "\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/incremental_barrier.cc"
	},
	{
		"id" : 190198,
		"snippet" : "#include \"tensorflow\/core\/util\/incremental_barrier.h\"\n\n#include <atomic>\n#include <functional>\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/incremental_barrier.cc"
	},
	{
		"id" : 190265,
		"snippet" : "  mutex mu;\n  GlobalJitLevelGetterTy getter TF_GUARDED_BY(mu);\n};\n\nGlobalJitLevelState* GetSingletonState() {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/xla_config_registry.cc"
	},
	{
		"id" : 191023,
		"snippet" : "  collector.AddError(1, 2, \"foo\");\n  collector.AddWarning(3, 4, \"bar\");\n  EXPECT_EQ(\"2(3): foo\\n4(5): bar\\n\", err);\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/proto\/proto_utils_test.cc"
	},
	{
		"id" : 191026,
		"snippet" : "\/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/proto\/descriptors.cc"
	},
	{
		"id" : 191059,
		"snippet" : "#include \"tensorflow\/core\/platform\/logging.h\"\n#include \"tensorflow\/core\/platform\/protobuf.h\"\n\nnamespace tensorflow {\nnamespace proto_utils {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/proto\/proto_utils.cc"
	},
	{
		"id" : 191061,
		"snippet" : "  switch (field_type) {\n    case WireFormatLite::TYPE_DOUBLE:\n      return dtype == tensorflow::DT_DOUBLE;\n    case WireFormatLite::TYPE_FLOAT:\n      return dtype == tensorflow::DT_FLOAT || dtype == tensorflow::DT_DOUBLE;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/proto\/proto_utils.cc"
	},
	{
		"id" : 191073,
		"snippet" : "    : StringErrorCollector(error_text, false) {}\n\nStringErrorCollector::StringErrorCollector(string* error_text,\n                                           bool one_indexing)\n    : error_text_(error_text), index_offset_(one_indexing ? 1 : 0) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/proto\/proto_utils.cc"
	},
	{
		"id" : 191081,
		"snippet" : "#include \"tensorflow\/core\/util\/sparse\/group_iterator.h\"\n\n#include <vector>\nnamespace tensorflow {\nnamespace sparse {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/group_iterator.cc"
	},
	{
		"id" : 191148,
		"snippet" : "#include \"tensorflow\/core\/util\/sparse\/sparse_tensor.h\"\n\n#include \"tensorflow\/core\/lib\/strings\/strcat.h\"\n\nnamespace tensorflow {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor.cc"
	},
	{
		"id" : 191184,
		"snippet" : "    const int32 row_zeros = index_ptr[1];\n    const int32 col_32 = index_ptr[2];\n    const int32 col_zeros = index_ptr[3];\n#endif\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor.cc"
	},
	{
		"id" : 191203,
		"snippet" : "  }\n\n  if (standard_order) {\n    if (shape_.size() == 1) {\n      if (IndicesValidVectorFastPath()) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor.cc"
	},
	{
		"id" : 191381,
		"snippet" : "  Tensor vals(DT_STRING, TensorShape({N}));\n  SparseTensor result;\n\n  EXPECT_EQ(SparseTensor::Create(ix, vals, TensorShape({10, 10, 10}), {0, 1, 2},\n                                 &result)\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191386,
		"snippet" : "  Tensor ix(DT_INT64, TensorShape({N, NDIM}));\n  Tensor vals(DT_STRING, TensorShape({N, 1}));\n  SparseTensor result;\n\n  EXPECT_EQ(SparseTensor::Create(ix, vals, TensorShape({10, 10, 10}), {0, 1, 2},\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191390,
		"snippet" : "            error::INVALID_ARGUMENT);\n}\n\nTEST(SparseTensorTest, SparseTensorInvalidOrder) {\n  int N = 5;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191401,
		"snippet" : "      \"Many sparse ops require sorted indices.\\n\"\n      \"    Use `tf.sparse.reorder` to create a correctly ordered copy.\"\n      \"\\n\\n\",\n      st_indices_valid.error_message());\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191451,
		"snippet" : "  const int NDIM = 3;\n\n  Tensor ix(DT_INT64, TensorShape({N, NDIM}));\n  Tensor vals(DT_INT32, TensorShape({N}));\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191485,
		"snippet" : "\n  Tensor ids(DT_INT64, TensorShape({N, DIM}));\n  Tensor vals(DT_INT64, TensorShape({N}));\n\n  ids.matrix<int64>()(0, 0) = 0;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191500,
		"snippet" : "  size[1] = 3;\n\n  SparseTensor slice = SparseTensor::Slice<int64>(st, start, size);\n\n  EXPECT_EQ(TensorShape(slice.shape()), TensorShape({2, 3}));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191516,
		"snippet" : "    state.PauseTiming();\n    for (int64 i = 0; i < N; ++i) {\n      for (int d = 0; d < NDIM32; ++d) {\n        ix_t(i, d) = rnd.Rand64() % 1000;\n      }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/sparse\/sparse_tensor_test.cc"
	},
	{
		"id" : 191580,
		"snippet" : "void HandleSliceToElement(const T* src, T* dest, int64 num_values) {\n  static_assert(is_simple_type<T>::value, \"Memcpy requires a simple type.\");\n  memcpy(dest, src, num_values * sizeof(T));\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/batch_util.cc"
	},
	{
		"id" : 191613,
		"snippet" : "    return errors::FailedPrecondition(\n        \"CopyContiguousSlices cannot perform copy: index out of range. \"\n        \"src_offset: \",\n        src_offset, \", num_slices: \", num_slices, \", src_dim0: \", src_dim0,\n        \", dst_offset: \", dst_offset, \", dst_dim0: \", dst_dim0, \".\");\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/batch_util.cc"
	},
	{
		"id" : 191628,
		"snippet" : "  auto element_t = element.tensor<T, NDIMS>();\n  auto parent_t = parent->tensor<T, NDIMS + 1>();\n  Eigen::DSizes<Eigen::DenseIndex, NDIMS + 1> slice_indices;\n  slice_indices[0] = index;\n  Eigen::DSizes<Eigen::DenseIndex, NDIMS + 1> slice_size;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/batch_util.cc"
	},
	{
		"id" : 191639,
		"snippet" : "    default:\n      return errors::Unimplemented(\"CopyElementToLargerSlice Unhandled rank: \",\n                                   element.dims());\n  }\n}\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/batch_util.cc"
	},
	{
		"id" : 191688,
		"snippet" : "               \"some int32 set directly\"),\n          Flag(\"some_int32_set_via_hook\",\n               [&](int32 value) {\n                 some_int32_set_via_hook = value;\n                 return true;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/command_line_flags_test.cc"
	},
	{
		"id" : 191692,
		"snippet" : "                 return true;\n               },\n               some_switch_set_via_hook, \"some switch set via hook\"),\n          Flag(\"some_name_set_directly\", &some_name_set_directly,\n               \"some name set directly\"),\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/command_line_flags_test.cc"
	},
	{
		"id" : 191701,
		"snippet" : "  EXPECT_EQ(argc, 1);\n}\n\nTEST(CommandLineFlagsTest, BadBoolValue) {\n  bool some_switch = false;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/command_line_flags_test.cc"
	},
	{
		"id" : 191706,
		"snippet" : "                   {Flag(\"some_float\", &some_float, \"some float\")});\n\n  EXPECT_EQ(false, parsed_ok);\n  EXPECT_NEAR(-23.23f, some_float, 1e-5f);\n  EXPECT_EQ(argc, 1);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/command_line_flags_test.cc"
	},
	{
		"id" : 191723,
		"snippet" : "  EXPECT_EQ(true, parsed_ok);\n  EXPECT_EQ(argc, 1);\n  EXPECT_EQ(call_count, 2);\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/command_line_flags_test.cc"
	},
	{
		"id" : 191761,
		"snippet" : "TEST(PresizedCuckooMapTest, Duplicates) {\n  static constexpr int kSmallTableSize = 1000;\n  PresizedCuckooMap<int> pscm(kSmallTableSize);\n\n  for (uint64 i = 0; i < kSmallTableSize; i++) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/presized_cuckoo_map_test.cc"
	},
	{
		"id" : 191926,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/saved_tensor_slice_util_test.cc"
	},
	{
		"id" : 191964,
		"snippet" : "  EXPECT_EQ(actual_output_shape_proto.dim(1).size(), -1);\n}\n\nTEST(CombineRaggedTensorToTensorShapes, UnknownShapeDenseValue) {\n  TensorShapeProto shape_proto;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/ragged_to_dense_util_test.cc"
	},
	{
		"id" : 192002,
		"snippet" : "  void Increment() TF_LOCKS_EXCLUDED(mu_) {\n    mutex_lock l(mu_);\n    ++count_;\n  }\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/incremental_barrier_test.cc"
	},
	{
		"id" : 192069,
		"snippet" : "      \/\/ \/stream:$index. So only keep \/stream:all and \/memcpy and ignore all\n      \/\/ \/stream:$index to only count GPU executions once.\n      if (ds.device().find(\"\/stream\") != std::string::npos &&\n          ds.device().find(\"\/stream:all\") == std::string::npos) {\n        continue;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stat_summarizer.cc"
	},
	{
		"id" : 192080,
		"snippet" : "        for (const auto& output : ns.output()) {\n          const int32 slot = output.slot();\n          if ((slot < 0) || (slot >= ns.output_size())) {\n            \/\/ This is not a hard error for Switch ops, so just pass.\n            continue;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stat_summarizer.cc"
	},
	{
		"id" : 192085,
		"snippet" : "  stats_calculator_->UpdateMemoryUsed(mem_total);\n}\n\n\nvoid StatSummarizer::PrintOutputs() const {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stat_summarizer.cc"
	},
	{
		"id" : 192090,
		"snippet" : "    }\n    LOG(INFO) << stream.str();\n  }\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stat_summarizer.cc"
	},
	{
		"id" : 192164,
		"snippet" : "  int called = false;\n  Status status = Status::OK();\n  auto done = [&called, &status](const Status& s) {\n    called = true;\n    status = s;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/reffed_status_callback_test.cc"
	},
	{
		"id" : 192169,
		"snippet" : "\n  auto done = [&num_called, &status, &n](const Status& s) {\n    ++num_called;\n    status = s;\n    n.Notify();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/reffed_status_callback_test.cc"
	},
	{
		"id" : 192201,
		"snippet" : "\/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/memmapped_file_system_test.cc"
	},
	{
		"id" : 192202,
		"snippet" : "\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/memmapped_file_system_test.cc"
	},
	{
		"id" : 192228,
		"snippet" : "}\n\nTEST(MemmappedFileSystemTest, ProxyToDefault) {\n  MemmappedEnv memmapped_env(Env::Default());\n  const string dir = testing::TmpDir();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/memmapped_file_system_test.cc"
	},
	{
		"id" : 192245,
		"snippet" : "    string_dense_config.key = kDenseStringKey;\n    string_dense_config.dtype = DT_STRING;\n    string_dense_config.shape = TensorShape({1});\n    string_dense_config.default_value = Tensor(DT_STRING, TensorShape({1}));\n    string_dense_config.default_value.scalar<tstring>()() = \"default\";\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper_test.cc"
	},
	{
		"id" : 192253,
		"snippet" : "\n  std::vector<Tensor*> output_dense_values(0);\n  std::vector<std::vector<Tensor>> output_sparse_values_tmp(3);\n  for (int i = 0; i < 3; ++i) {\n    output_sparse_values_tmp[i] = std::vector<Tensor>(1);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper_test.cc"
	},
	{
		"id" : 192255,
		"snippet" : "                                           &output_sparse_values_tmp));\n\n  const std::vector<Tensor>& int64_tensor_vec = output_sparse_values_tmp[0];\n  EXPECT_EQ(1, int64_tensor_vec.size());\n  EXPECT_EQ(42, int64_tensor_vec[0].vec<int64>()(0));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper_test.cc"
	},
	{
		"id" : 192261,
		"snippet" : "  const std::vector<Tensor>& int64_tensor_vec = output_sparse_values_tmp[0];\n  EXPECT_EQ(1, int64_tensor_vec.size());\n  EXPECT_EQ(0, int64_tensor_vec[0].vec<int64>().size());\n\n  const std::vector<Tensor>& float_tensor_vec = output_sparse_values_tmp[1];\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper_test.cc"
	},
	{
		"id" : 192278,
		"snippet" : "\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/einsum_op_util.cc"
	},
	{
		"id" : 192304,
		"snippet" : "    \/\/ better honor it. Ideally, even if per_thread_max_parallelism >\n    \/\/ num_workers, we should expect that Shard() implementation do\n    \/\/ not over-shard. Unfortunately, ThreadPoolDevice::parallelFor\n    \/\/ tends to over-shard.\n    EXPECT_LE(num_shards, 1 + per_thread_max_parallelism);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/work_sharder_test.cc"
	},
	{
		"id" : 192330,
		"snippet" : "  ASSERT_TRUE(output.find(\"myconstant\") != std::string::npos) << output;\n  \/\/ stats by node type should include the type.\n  ASSERT_TRUE(by_node_type.find(\"Const\") != std::string::npos) << by_node_type;\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stat_summarizer_test.cc"
	},
	{
		"id" : 192356,
		"snippet" : "namespace checkpoint {\n\nTensorSliceReader::Table::~Table() {}\n\nnamespace {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_reader.cc"
	},
	{
		"id" : 192393,
		"snippet" : "      *type = tss->type();\n    }\n    return true;\n  } else {\n    return false;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_reader.cc"
	},
	{
		"id" : 192400,
		"snippet" : "    success = CopySliceData(name, slice,                                 \\\n                            t->flat<EnumToDataType<dt>::Type>().data()); \\\n    break;\n\n  switch (type) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_reader.cc"
	},
	{
		"id" : 192401,
		"snippet" : "    READER_COPY(DT_FLOAT);\n    READER_COPY(DT_DOUBLE);\n    READER_COPY(DT_INT32);\n    READER_COPY(DT_UINT8);\n    READER_COPY(DT_INT16);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_reader.cc"
	},
	{
		"id" : 192482,
		"snippet" : "  EXPECT_TRUE(IsSpecHelper(\"\/job:work\/replica:*\/task:2\",\n                           \"\/job:work\/replica:1\/task:2\/device:GPU:3\"));\n  EXPECT_TRUE(IsSpecHelper(\"\/task:*\", \"\/job:*\/replica:1\/task:2\/device:GPU:3\"));\n  EXPECT_TRUE(IsSpecHelper(\"\/task:2\", \"\/job:*\/replica:1\/task:2\/device:GPU:3\"));\n  EXPECT_TRUE(IsSpecHelper(\"\/cpu:*\", \"\/job:*\/replica:1\/task:2\/cpu:1\"));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils_test.cc"
	},
	{
		"id" : 192524,
		"snippet" : "    EXPECT_EQ(s.code(), error::INVALID_ARGUMENT);\n    EXPECT_EQ(\"\", canonical_name);\n  }\n\n  {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils_test.cc"
	},
	{
		"id" : 192541,
		"snippet" : "  Example fast_example;\n  EXPECT_TRUE(example.ParseFromString(serialized));\n  example.DiscardUnknownFields();\n  EXPECT_TRUE(TestFastParse(serialized, &fast_example));\n  EXPECT_EQ(example.DebugString(), fast_example.DebugString());\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing_test.cc"
	},
	{
		"id" : 192571,
		"snippet" : "      .mutable_int64_list()\n      ->add_value(13);\n  TestCorrectness(Serialize(example));\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing_test.cc"
	},
	{
		"id" : 192581,
		"snippet" : "  new_feature.default_value = Tensor(dtype, {});\n  new_feature.variable_length = variable_length;\n  new_feature.elements_per_stride = elements_per_stride;\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing_test.cc"
	},
	{
		"id" : 192589,
		"snippet" : "\n  for (const FastParseExampleConfig& config :\n       {config_dense, config_varlen, config_sparse, config_mixed}) {\n    {\n      Result result;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing_test.cc"
	},
	{
		"id" : 192600,
		"snippet" : "    example.Clear();\n    auto num_active_keys = 1 + rng->Rand32() % all_keys.size();\n\n    \/\/ Generate features.\n    for (auto i = 0; i < num_active_keys; ++i) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing_test.cc"
	},
	{
		"id" : 192641,
		"snippet" : "\/\/ TF_DEBUG_CUDNN_RNN_USE_TENSOR_OPS\n\/\/ TF_DEBUG_CUDNN_RNN_ALGO\n\/\/ By default it is disabled and only intended for testing and profiling.\nADD_BOOL_CUDNN_FLAG(DebugCudnnRnn, TF_DEBUG_CUDNN_RNN, false);\n\/\/ If using TENSOR_OP_MATH in Cudnn RNN for both forward and backward pass. Only\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/use_cudnn.cc"
	},
	{
		"id" : 192654,
		"snippet" : "  Node* node;\n  TF_CHECK_OK(NodeBuilder(\"A\", \"NoOp\").Finalize(&graph, &node));\n\n  setenv(\"TF_DUMP_GRAPH_PREFIX\", testing::TmpDir().c_str(), 1);\n  string ret = DumpGraphToFile(\"graph\", graph);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/dump_graph_test.cc"
	},
	{
		"id" : 192757,
		"snippet" : "      p->has_task = !absl::ConsumePrefix(&fullname, \"*\");\n      if (p->has_task && !ConsumeNumber(&fullname, &p->task)) {\n        return false;\n      }\n      progress = true;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192775,
		"snippet" : "  if (!ParseFullName(basename, &parsed_basename)) {\n    return errors::InvalidArgument(\"Could not parse basename: \", basename,\n                                   \" into a device specification.\");\n  }\n  if (!(parsed_basename.has_job && parsed_basename.has_replica &&\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192784,
		"snippet" : "bool DeviceNameUtils::IsSpecification(const ParsedName& less_specific,\n                                      const ParsedName& more_specific) {\n  if (less_specific.has_job &&\n      (!more_specific.has_job || (less_specific.job != more_specific.job))) {\n    return false;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192787,
		"snippet" : "  if (less_specific.has_type &&\n      (!more_specific.has_type || (less_specific.type != more_specific.type))) {\n    return false;\n  }\n  if (less_specific.has_id &&\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192803,
		"snippet" : "          \"'\");\n    } else {\n      target->has_job = other.has_job;\n      target->job = other.job;\n    }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192806,
		"snippet" : "      target->replica = other.replica;\n    }\n  }\n\n  if (other.has_task) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192811,
		"snippet" : "      } else {\n        target->has_id = false;\n        target->has_type = false;\n        return Status::OK();\n      }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192831,
		"snippet" : "\/* static *\/\nstring DeviceNameUtils::LocalName(StringPiece fullname) {\n  ParsedName x;\n  CHECK(ParseFullName(fullname, &x)) << fullname;\n  return LocalName(x.type, x.id);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192836,
		"snippet" : "                                      string* device) {\n  ParsedName pn;\n  if (ParseFullName(name, &pn) && pn.has_type && pn.has_id) {\n    task->clear();\n    task->reserve(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192843,
		"snippet" : "  }\n  return false;\n}\n\nstd::vector<string> DeviceNameUtils::GetNamesForDeviceMappings(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192850,
		"snippet" : "  *host_device_name = DeviceNameUtils::ParsedNameToString(device);\n  return Status::OK();\n}\n\nstd::ostream& operator<<(std::ostream& os,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192851,
		"snippet" : "                         const DeviceNameUtils::ParsedName& x) {\n  os << DeviceNameUtils::ParsedNameToString(x);\n  return os;\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/device_name_utils.cc"
	},
	{
		"id" : 192875,
		"snippet" : "    TensorSlice s = TensorSlice::ParseOrDie(\"1,2:0,3\");\n    std::vector<std::pair<TensorSlice, string>> results;\n    EXPECT_TRUE(tss.QueryMeta(s, &results));\n    EXPECT_EQ(2, results.size());\n    \/\/ Allow results to be returned in either order\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_set_test.cc"
	},
	{
		"id" : 192878,
		"snippet" : "    }\n  }\n\n  \/\/ Slice #4 includes the hole and so there is no match\n  \/\/   .   .   .   .   .\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_set_test.cc"
	},
	{
		"id" : 192881,
		"snippet" : "\nstatic void BM_RegisterOneByOne(::testing::benchmark::State& state) {\n  TensorShape shape({static_cast<int>(state.max_iterations), 41});\n  TensorSliceSet slice_set(shape, DT_INT32);\n  int i = 0;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_set_test.cc"
	},
	{
		"id" : 192913,
		"snippet" : "\/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/bcast_test.cc"
	},
	{
		"id" : 192933,
		"snippet" : "    EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {3}, use_optimization));\n    EXPECT_EQ(\"invalid\", BCastList3({1}, {5, 3, 2}, {2, 2}, use_optimization));\n    EXPECT_EQ(\"invalid\",\n              BCastList3({1}, {5, 3, 2}, {10, 1, 1}, use_optimization));\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/bcast_test.cc"
	},
	{
		"id" : 193016,
		"snippet" : "            \"[1,1,1,3,1][11,7,5,1,2][11,7,5,3,2][1,1,1,1,1]\"\n            \"[11,7,5,3,2]\"\n            \"[11,7,5,3,2]\"\n            \"[0,1,2,4][]\");\n}\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/bcast_test.cc"
	},
	{
		"id" : 193034,
		"snippet" : "            \"[2,0,5]\"\n            \"[][0,1]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 5}),\n            \"[1,5][0,1][0,5][1,1]\"\n            \"[0,5]\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/bcast_test.cc"
	},
	{
		"id" : 193036,
		"snippet" : "            \"[2,0,5]\"\n            \"[2,0,5]\"\n            \"[][0,1]\");\n  EXPECT_EQ(BCast({5}, {2, 0, 5}, false),\n            \"[1,1,5][2,0,1][2,0,5][1,1,1]\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/bcast_test.cc"
	},
	{
		"id" : 193089,
		"snippet" : "                               const double2* const*, int, const int*,\n                               double2**, int, int*, int);\n\nusing getri_S = cublasStatus_t(cublasContext*, int, const float* const*, int,\n                               const int*, float**, int, int*, int);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193091,
		"snippet" : "                               const int*, double2**, int, int*, int);\n\nusing matinv_S = cublasStatus_t(cublasContext*, int, const float* const*, int,\n                                float**, int, int*, int);\nusing matinv_D = cublasStatus_t(cublasContext*, int, const double* const*, int,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193153,
		"snippet" : "TF_CALL_LAPACK_TYPES(GEAM_INSTANCE);\n\ntemplate <typename Scalar, typename BufSizeFnT, typename SolverFnT>\nstatic inline Status PotrfImpl(BufSizeFnT bufsize, SolverFnT solver,\n                               CudaSolver* cuda_solver,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193188,
		"snippet" : "  \/* Get amount of workspace memory required. *\/\n  int lwork;\n  TF_RETURN_IF_CUSOLVER_ERROR(\n      bufsize(cusolver_dn_handle, side, trans, m, n, k, CUDAComplex(dev_a), lda,\n              CUDAComplex(dev_tau), CUDAComplex(dev_c), ldc, &lwork));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193212,
		"snippet" : "    BufSizeFnT bufsize, SolverFnT solver, CudaSolver* cuda_solver,\n    OpKernelContext* context, cusolverDnHandle_t cusolver_dn_handle,\n    signed char jobu, signed char jobvt, int m, int n, Scalar* A, int lda,\n    Scalar* S, Scalar* U, int ldu, Scalar* VT, int ldvt, int* dev_lapack_info) {\n  mutex_lock lock(handle_map_mutex);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193250,
		"snippet" : "             lda, dev_pivots,\n             reinterpret_cast<CudaScalar**>(dev_a_inv_dev_ptrs.mutable_data()),\n             ldainv, dev_lapack_info->mutable_data(), batch_size));\n  return Status::OK();\n}\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193261,
		"snippet" : "                                 BLAS_SOLVER_FN(matinvBatched, type_prefix)), \\\n                             this, context_, cublas_handle_, n,               \\\n                             host_a_dev_ptrs, lda, host_a_inv_dev_ptrs,       \\\n                             ldainv, dev_lapack_info, batch_size);            \\\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193267,
		"snippet" : "      const Scalar* A, int lda, Scalar* B, int ldb) {                        \\\n    return TrsmImpl(BLAS_SOLVER_FN(trsm, type_prefix), cublas_handle_, side, \\\n                    uplo, trans, diag, m, n, alpha, A, lda, B, ldb);         \\\n  }\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_solvers.cc"
	},
	{
		"id" : 193298,
		"snippet" : "  }\n\n  hipsparseHandle_t& handle() {\n    DCHECK(initialized_);\n    return hipsparse_handle_;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/rocm_sparse.cc"
	},
	{
		"id" : 193351,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_format_test.cc"
	},
	{
		"id" : 193365,
		"snippet" : "                                };\n  StaCoExTensorDm kTdmNCHW[4] = { kTdmInvalid,\n                                  {  0,  -1,   2,   1, {  2, -1, -1 } },\n                                  {  0,   2,   3,   1, {  2,  3, -1 } },\n                                  {  0,   3,   4,   1, {  2,  3,  4 } }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_format_test.cc"
	},
	{
		"id" : 193884,
		"snippet" : "    static void* GetDsoHandle() {                                           \\\n      auto s = GetRocblasDsoHandle();                                       \\\n      return s.ValueOrDie();                                                \\\n    }                                                                       \\\n    static FuncPtrT LoadOrDie() {                                           \\\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/rocm_solvers.cc"
	},
	{
		"id" : 193996,
		"snippet" : "#include <numeric>\n\n#include \"tensorflow\/core\/lib\/core\/status_test_util.h\"\n#include \"tensorflow\/core\/platform\/test.h\"\n#include \"tensorflow\/core\/util\/gpu_kernel_helper.h\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/gpu_kernel_helper_test.cu.cc"
	},
	{
		"id" : 194013,
		"snippet" : "               op_name, param, width, lane_id, actual, expected);\n        GpuAtomicAdd(failure_count, 1);\n      }\n    };\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/gpu_kernel_helper_test.cu.cc"
	},
	{
		"id" : 194017,
		"snippet" : "    }\n\n    for (unsigned delta = 0; delta <= warpSize; ++delta) {\n      unsigned actual_lane = detail::GpuShuffleDownGetSrcLane(delta, width);\n      unsigned expect_lane =\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/gpu_kernel_helper_test.cu.cc"
	},
	{
		"id" : 194036,
		"snippet" : "\nbool operator==(const Gpu2DLaunchConfig& a, const Gpu2DLaunchConfig& b) {\n  return a.thread_per_block.x == b.thread_per_block.x &&\n         a.thread_per_block.y == b.thread_per_block.y &&\n         a.thread_per_block.z == b.thread_per_block.z &&\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/gpu_kernel_helper_test.cu.cc"
	},
	{
		"id" : 194057,
		"snippet" : "\/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def.cc"
	},
	{
		"id" : 194073,
		"snippet" : "                           const EqualGraphDefOptions& options) {\n  uint64 h = 0xDECAFCAFFE;\n  \/\/ Insert NodeDefs into map to deterministically sort by name\n  std::map<string, const NodeDef*> nodes;\n  for (const NodeDef& node : ndefs) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def.cc"
	},
	{
		"id" : 194080,
		"snippet" : "  }\n\n  if (actual.op() != expected.op()) {\n    if (diff != nullptr) {\n      *diff = strings::StrCat(\"Node named '\", actual.name(), \"' has op '\",\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def.cc"
	},
	{
		"id" : 194102,
		"snippet" : "          \"Node named '\", actual.name(), \"' has unexpected attr '\",\n          *actual_attr.begin(), \"' with value: \",\n          SummarizeAttrValue(actual.attr().find(*actual_attr.begin())->second));\n    }\n    return false;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def.cc"
	},
	{
		"id" : 194251,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n#include \"tensorflow\/core\/util\/memmapped_file_system_writer.h\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/memmapped_file_system_writer.cc"
	},
	{
		"id" : 194264,
		"snippet" : "    output_file_offset_ += encoded.size();\n  }\n  return res;\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/memmapped_file_system_writer.cc"
	},
	{
		"id" : 194422,
		"snippet" : "Status TestReporter::Close() {\n  if (report_file_.IsClosed()) return Status::OK();\n\n  BenchmarkEntries entries;\n  *entries.add_entry() = benchmark_entry_;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/reporter.cc"
	},
	{
		"id" : 194447,
		"snippet" : "  stat.UpdateStat(100);\n  stat.UpdateStat(0);\n  EXPECT_EQ(4, stat.count());\n  EXPECT_EQ(-1, stat.min());\n  EXPECT_EQ(100, stat.max());\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator_test.cc"
	},
	{
		"id" : 194502,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/matmul_autotune.cc"
	},
	{
		"id" : 194554,
		"snippet" : "  bool initialized_;\n  cudaStream_t stream_;\n  cusparseHandle_t cusparse_handle_;\n\n  TF_DISALLOW_COPY_AND_ASSIGN(CudaSparseHandles);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194555,
		"snippet" : "};\n\n\/\/ TODO(ebrevdo): Replace global mutex guarding CudaSparseHandles\n\/\/ lookup with one of:\n\/\/    1. Adding the handle to the CudaStream structure; do the lookup there.\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194602,
		"snippet" : "\nStatus GpuSparse::CsrgeamNnz(\n    int m, int n, const cusparseMatDescr_t descrA, int nnzA,\n    const int* csrSortedRowPtrA, const int* csrSortedColIndA,\n    const cusparseMatDescr_t descrB, int nnzB, const int* csrSortedRowPtrB,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194640,
		"snippet" : "                              const int* csrSortedRowPtrA,\n                              const int* csrSortedColIndA, const Scalar* x,\n                              const Scalar* beta_host, Scalar* y) {\n  cusparseSpMatDescr_t matA;\n  TF_RETURN_IF_GPUSPARSE_ERROR(cusparseCreateCsr(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194666,
		"snippet" : "      int* csrSortedRowPtrC, int* csrSortedColIndC, void* workspace) {        \\\n    DCHECK(initialized_);                                                     \\\n    return Csrgeam2Impl(SPARSE_FN(csrgeam2, sparse_prefix), context_,         \\\n                        *gpusparse_handle_, m, n, alpha, descrA, nnzA,        \\\n                        csrSortedValA, csrSortedRowPtrA, csrSortedColIndA,    \\\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194679,
		"snippet" : "        *gpusparse_handle_, m, n, alpha, descrA, nnzA, csrSortedValA,          \\\n        csrSortedRowPtrA, csrSortedColIndA, beta, descrB, nnzB, csrSortedValB, \\\n        csrSortedRowPtrB, csrSortedColIndB, descrC, csrSortedValC,             \\\n        csrSortedRowPtrC, csrSortedColIndC, bufferSize);                       \\\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194708,
		"snippet" : "      const int* csrSortedColIndA, const cusparseMatDescr_t descrB, int nnzB, \\\n      const Scalar* csrSortedValB, const int* csrSortedRowPtrB,               \\\n      const int* csrSortedColIndB, const cusparseMatDescr_t descrC,           \\\n      Scalar* csrSortedValC, int* csrSortedRowPtrC, int* csrSortedColIndC,    \\\n      const csrgemm2Info_t info, void* workspace) {                           \\\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194718,
		"snippet" : "  template <>                                                                 \\\n  Status GpuSparse::Csru2csr<Scalar>(                                         \\\n      int m, int n, int nnz, const cusparseMatDescr_t descrA, Scalar* csrVal, \\\n      const int* csrRowPtr, int* csrColInd) {                                 \\\n    DCHECK(initialized_);                                                     \\\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194730,
		"snippet" : "      DataTypeToEnum<Scalar>::value,\n      TensorShape({static_cast<int64>(bufferSize)}), &buffer));\n\n  DCHECK(buffer.flat<Scalar>().data() != nullptr);\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194734,
		"snippet" : "    DCHECK(initialized_);                                                     \\\n    return Csr2cscImpl(cudaDataType, context_, *gpusparse_handle_, m, n, nnz, \\\n                       csrVal, csrRowPtr, csrColInd, cscVal, cscRowInd,       \\\n                       cscColPtr, copyValues);                                \\\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/cuda_sparse.cc"
	},
	{
		"id" : 194781,
		"snippet" : "Status CheckValidPadding(Padding padding_type,\n                         const std::vector<int64>& explicit_paddings,\n                         int num_dims, TensorFormat data_format) {\n  if (padding_type == Padding::EXPLICIT) {\n    const int num_paddings = explicit_paddings.size();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/padding.cc"
	},
	{
		"id" : 194794,
		"snippet" : "namespace checkpoint {\n\nTensorSliceSet::TensorSliceSet(const TensorShape& shape, DataType type)\n    : shape_(shape), type_(type) {}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_set.cc"
	},
	{
		"id" : 194815,
		"snippet" : "      return errors::Internal(\"Incompatible tensor types detected for tensor \",\n                              name,\n                              \": existing = \", DataTypeString(tss->type()),\n                              \", new = \", DataTypeString(type));\n    }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_set.cc"
	},
	{
		"id" : 194849,
		"snippet" : "  if (!env_->IsDirectory(dump_root_).ok()) {\n    TF_RETURN_WITH_CONTEXT_IF_ERROR(env_->RecursivelyCreateDir(dump_root_),\n                                    \"Failed to create directory \", dump_root_);\n  }\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194850,
		"snippet" : "  int64 time_in_seconds = env_->NowMicros() \/ 1e6;\n  file_prefix_ = io::JoinPath(\n      dump_root_, strings::Printf(\"%s.%010lld.%s\", kFileNamePrefix,\n                                  static_cast<long long>(time_in_seconds),\n                                  port::Hostname().c_str()));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194860,
		"snippet" : "  DebugEvent debug_event;\n  debug_event.set_allocated_graph_op_creation(graph_op_creation);\n  return SerializeAndWriteDebugEvent(&debug_event, GRAPHS);\n}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194868,
		"snippet" : "    debug_event.set_allocated_graph_execution_trace(graph_execution_trace);\n    return SerializeAndWriteDebugEvent(&debug_event, GRAPH_EXECUTION_TRACES);\n  } else {\n    \/\/ Circular buffer behavior.\n    DebugEvent debug_event;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194871,
		"snippet" : "    return Status::OK();\n  }\n}\n\nStatus DebugEventsWriter::WriteGraphExecutionTrace(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194895,
		"snippet" : "    }\n    TF_RETURN_IF_ERROR(graph_execution_traces_writer_->Flush());\n  }\n\n  return Status::OK();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194904,
		"snippet" : "    if (!graphs_writer_->Close().ok()) {\n      failed_to_close_files.push_back(graphs_writer_->FileName());\n    }\n    graphs_writer_.reset(nullptr);\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194914,
		"snippet" : "      graph_execution_trace_buffer_(),\n      graph_execution_trace_buffer_mu_(),\n      device_name_to_id_(),\n      device_mu_() {}\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/debug_events_writer.cc"
	},
	{
		"id" : 194946,
		"snippet" : "      if (static_cast<size_t>(values.value_size()) != num_elements) {\n        return errors::InvalidArgument(\n            \"Name: \", name, \", Key: \", key, \", Index: \", out_index,\n            \".  Number of int64 values != expected.  \"\n            \"values size: \",\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 194963,
		"snippet" : "\n  \/\/ Update indices.\n  if (num_elements > 0) {\n    auto ix_t = indices->matrix<int64>();\n    int64* ix_p = &ix_t(offset, 0);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 194975,
		"snippet" : "}\n\nStatus SingleExampleProtoToTensors(\n    const Example& example, const string& example_name, const int batch_index,\n    const std::vector<FixedLenFeature>& fixed_len_features,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 194985,
		"snippet" : "    }\n  }\n\n  \/\/ Handle sparse features.\n  for (size_t d = 0; d < var_len_features.size(); ++d) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 194994,
		"snippet" : "    max_num_features = std::max(max_num_features, num_elements);\n  }\n  output_shapes->indices_shape.AddDim(total_num_features);\n  output_shapes->indices_shape.AddDim(2);\n  output_shapes->values_shape.AddDim(total_num_features);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 195002,
		"snippet" : "    const DataType& dtype = config.dtype;\n    for (const int dim : shape.dim_sizes()) out_shape.AddDim(dim);\n    (*output_dense_values_tensor)[d] = Tensor(allocator, dtype, out_shape);\n    output_dense_values_tensor_ptrs[d] = &(*output_dense_values_tensor)[d];\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 195008,
		"snippet" : "    const TensorShape& indices_shape = sparse_tensor_batch_shapes.indices_shape;\n    const TensorShape& values_shape = sparse_tensor_batch_shapes.values_shape;\n\n    \/\/ Allocate the sparse indices here.\n    (*output_sparse_indices_tensor)[d] =\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 195044,
		"snippet" : "    TF_RETURN_IF_ERROR(CheckValidType(type));\n  }\n  for (const DataType& type : context_sparse_types) {\n    TF_RETURN_IF_ERROR(CheckValidType(type));\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 195064,
		"snippet" : "    } else {\n      variable_length->push_back(false);\n      dense_shapes[i].AsTensorShape(&dense_shape);\n    }\n    elements_per_stride->push_back(dense_shape.num_elements());\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_helper.cc"
	},
	{
		"id" : 195266,
		"snippet" : "              \"name\";\n  } else {\n    InitField(stream, 24) << \"[node type]\";\n    InitField(stream, 17) << \"[start]\";\n    InitField(stream, 9) << \"[first]\";\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195271,
		"snippet" : "\n  std::stringstream stream;\n  if (options_.format_as_csv) {\n    std::string name(detail.name);\n    std::replace(name.begin(), name.end(), ',', '\\t');\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195280,
		"snippet" : "      case BY_MEMORY:\n        stream << detail->mem_used.avg();\n        break;\n      case BY_TYPE:\n        stream << detail->type;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195281,
		"snippet" : "        break;\n      default:\n        stream << \"\";\n        break;\n    }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195282,
		"snippet" : "\n    sorted_list.emplace(stream.str(), detail);\n  }\n\n  while (!sorted_list.empty()) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195291,
		"snippet" : "         << std::endl;\n\n  std::map<std::string, int64_t> node_type_map_count;\n  std::map<std::string, int64_t> node_type_map_time;\n  std::map<std::string, int64_t> node_type_map_memory;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195297,
		"snippet" : "    InitField(stream, 10) << \"[times called]\";\n    stream << std::endl;\n  }\n\n  float cdf = 0.0f;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195306,
		"snippet" : "  double cumulative_stat_on_node = 0;\n\n  std::stringstream stream;\n  stream << HeaderString(title) << std::endl;\n  int stat_num = 0;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/stats_calculator.cc"
	},
	{
		"id" : 195333,
		"snippet" : "\n}  \/\/ namespace\n\ntemplate <class T>\nstatic Status TF_MUST_USE_RESULT BuildDenseSpec(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/strided_slice_op.cc"
	},
	{
		"id" : 195341,
		"snippet" : "          dense->strides[full_index] = 1;\n          dense->begin_mask |= (1 << full_index);\n          dense->end_mask |= (1 << full_index);\n          dense->final_shape_gather_indices.push_back(full_index);\n          dense->final_shape_gather_indices_sparse.push_back(-1);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/strided_slice_op.cc"
	},
	{
		"id" : 195420,
		"snippet" : "  }\n\n  for (int i = 1; i < value_shape.dim_size(); ++i) {\n    const TensorShapeProto::Dim& value_dim = value_shape.dim(i);\n    TensorShapeProto::Dim* output_shape_dim = output_shape->mutable_dim(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/ragged_to_dense_util.cc"
	},
	{
		"id" : 195523,
		"snippet" : "      LOG(WARNING) << \"Caching disabled because the checkpoint file \"\n                   << \"is being opened with two different open functions: \"\n                   << filepattern;\n    }\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_reader_cache.cc"
	},
	{
		"id" : 195604,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_writer_test.cc"
	},
	{
		"id" : 195606,
		"snippet" : "#include \"tensorflow\/core\/framework\/versions.pb.h\"\n#include \"tensorflow\/core\/lib\/core\/status_test_util.h\"\n#include \"tensorflow\/core\/lib\/core\/stringpiece.h\"\n#include \"tensorflow\/core\/lib\/io\/path.h\"\n#include \"tensorflow\/core\/lib\/strings\/str_util.h\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_writer_test.cc"
	},
	{
		"id" : 195631,
		"snippet" : "  std::unique_ptr<TensorSliceReader::Table> table(tptr);\n  CHECK_NOTNULL(table.get());\n\n  \/\/ We expect a block of SavedTensorSlices\n  string value;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_writer_test.cc"
	},
	{
		"id" : 195662,
		"snippet" : "  EXPECT_EQ(TensorSliceWriter::MaxBytesPerElement(DT_COMPLEX128),\n            BytesPerElementHelper<complex128>(-1.0));\n  EXPECT_EQ(TensorSliceWriter::MaxBytesPerElement(DT_INT32),\n            BytesPerElementHelper<int32>(-1));\n  EXPECT_EQ(TensorSliceWriter::MaxBytesPerElement(DT_INT64),\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_slice_writer_test.cc"
	},
	{
		"id" : 195731,
		"snippet" : "    TF_EXPECT_OK(e_.ToGraphDef(&expected));\n    GraphDef actual;\n    TF_EXPECT_OK(a_.ToGraphDef(&actual));\n    bool match = EqualGraphDef(actual, expected, &diff_);\n    if (match) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def_test.cc"
	},
	{
		"id" : 195736,
		"snippet" : "  EXPECT_TRUE(Match()) << diff_;\n}\n\nTEST_F(EqualGraphDefTest, NoMatch) {\n  Input(e_.opts().WithName(\"A\"));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def_test.cc"
	},
	{
		"id" : 195759,
		"snippet" : "              .WithControlInput(b));\n  EXPECT_TRUE(Match()) << diff_;\n}\n\nTEST_F(EqualGraphDefTest, ControlInputMismatch) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/equal_graph_def_test.cc"
	},
	{
		"id" : 195854,
		"snippet" : "  const char* tf_env_var_val = getenv(string(env_var_name).c_str());\n  if (tf_env_var_val == nullptr) {\n    return Status::OK();\n  }\n  string str_value = absl::AsciiStrToLower(tf_env_var_val);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/env_var.cc"
	},
	{
		"id" : 195890,
		"snippet" : "  }\n  return filename_;\n}\n\nvoid EventsWriter::WriteSerializedEvent(StringPiece event_str) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/events_writer.cc"
	},
	{
		"id" : 195904,
		"snippet" : "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*\/\n#include \"tensorflow\/core\/util\/example_proto_fast_parsing.h\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 195909,
		"snippet" : "#include \"tensorflow\/core\/util\/presized_cuckoo_map.h\"\n#include \"tensorflow\/core\/util\/sparse\/sparse_tensor.h\"\n\nnamespace tensorflow {\nnamespace example {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 195929,
		"snippet" : "      case kDelimitedTag(2):\n        *dtype = DT_FLOAT;\n        break;\n      case kDelimitedTag(3):\n        *dtype = DT_INT64;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 195951,
		"snippet" : "          if (!stream.ReadRaw(float_list->data() + initial_size, bytes_to_copy))\n            return false;\n        } else {\n          int64 index = initial_size;\n          while (!stream.ExpectAtEnd()) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 195982,
		"snippet" : "  DCHECK(stream != nullptr);\n  DCHECK(example != nullptr);\n  uint32 length;\n  if (!stream->ReadVarint32(&length)) return false;\n  auto limit = stream->PushLimit(length);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196007,
		"snippet" : "enum class Type { Dense, Sparse, Ragged };\n\n\/\/ Note: We use SparseBuffer for sparse, ragged, and dense_varlen features.\nstruct SparseBuffer {\n  \/\/ Features are in one of the 3 vectors below depending on config's dtype.\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196010,
		"snippet" : "\nstruct SeededHasher {\n  uint64 operator()(StringPiece s) const {\n    return Hash64(s.data(), s.size(), seed);\n  }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196031,
		"snippet" : "      \/\/ Compare comment at the beginning of the loop.\n      if (dense_feature_last_example[d] == example_index) {\n        LogDenseFeatureDataLoss(feature_name);\n        continue;\n      }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196037,
		"snippet" : "              \"Values size: \",\n              size,\n              \" but output shape: \", config.dense[d].shape.DebugString()));\n        };\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196038,
		"snippet" : "        switch (config.dense[d].dtype) {\n          case DT_INT64: {\n            auto out_p = out.flat<int64>().data() + offset;\n            LimitedArraySlice<int64> slice(out_p, num_elements);\n            if (!feature.ParseInt64List(&slice)) return parse_error();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196042,
		"snippet" : "            auto out_p = out.flat<tstring>().data() + offset;\n            LimitedArraySlice<tstring> slice(out_p, num_elements);\n            if (!feature.ParseBytesList(&slice)) return parse_error();\n            if (slice.EndDistance() != 0) {\n              return shape_error(num_elements - slice.EndDistance(), \"bytes\");\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196069,
		"snippet" : "              return parse_error();\n            }\n          }\n          out.example_end_indices.push_back(out.bytes_list.size());\n          break;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196080,
		"snippet" : "      case DT_STRING: {\n        std::copy_n(in.flat<tstring>().data(), num_elements,\n                    out.flat<tstring>().data() + offset);\n        break;\n      }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196090,
		"snippet" : "  }\n}\n\n\/\/ Use this in the \"default\" clause of switch statements when dispatching\n\/\/ on a dtype variable that was checked by CheckConfigDataType():\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196092,
		"snippet" : "\nStatus CheckConfigDataTypes(const Config& config) {\n  \/\/ Check config so we can safely CHECK(false) in switches on config.*.dtype\n  for (auto& c : config.sparse) {\n    TF_RETURN_IF_ERROR(CheckConfigDataType(c.dtype));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196094,
		"snippet" : "    TF_RETURN_IF_ERROR(CheckConfigDataType(c.dtype));\n    if (!(c.splits_dtype == DT_INT32 || c.splits_dtype == DT_INT64)) {\n      return errors::InvalidArgument(\"Invalid ragged_split_type: \",\n                                     DataTypeString(c.splits_dtype));\n    }\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196137,
		"snippet" : "  const size_t num_minibatches = [&] {\n    size_t result = 0;\n    size_t minibatch_bytes = 0;\n    for (size_t i = 0; i < serialized.size(); i++) {\n      if (minibatch_bytes == 0) {  \/\/ start minibatch\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196145,
		"snippet" : "    size_t start = first_example_of_minibatch(minibatch);\n    size_t end = first_example_of_minibatch(minibatch + 1);\n    for (size_t e = start; e < end; ++e) {\n      PerExampleFeatureStats* stats = nullptr;\n      if (config.collect_feature_stats) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196206,
		"snippet" : "  if (stats) {\n    \/\/ TODO(b\/111553342): This may over-count the number of features if there\n    \/\/ are duplicate keys in the feature map. Consider deduplicating the keys\n    \/\/ before computing the count.\n    stats->features_count = parsed_example.size();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196234,
		"snippet" : "        feature_already_seen[d] = true;\n\n        \/\/ Handle sparse features.\n        if (example_dtype != DT_INVALID && example_dtype != feature_dtype) {\n          return example_error(strings::StrCat(\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196251,
		"snippet" : "        case DT_INT64: {\n          *out = Tensor(out_dtype, out_shape);\n          CopyOrMoveBlock(int64_list.begin(), int64_list.end(),\n                          out->flat<int64>().data());\n          break;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196270,
		"snippet" : "  return example_names.empty() ? \"<unknown>\" : example_names[n];\n}\n\n\/\/ Return the number of bytes elements parsed, or -1 on error. If out is null,\n\/\/ this method simply counts the number of elements without any copying.\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196292,
		"snippet" : "    uint8 peek_tag = PeekTag(stream);\n    if (peek_tag == kDelimitedTag(1)) {  \/\/ packed\n      uint32 packed_length;\n      if (!stream->ExpectTag(kDelimitedTag(1)) ||\n          !stream->ReadVarint32(&packed_length)) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196309,
		"snippet" : "inline DataType ParseDataType(protobuf::io::CodedInputStream* stream) {\n  uint8 peek_tag = PeekTag(stream);\n  switch (peek_tag) {\n    case kDelimitedTag(1):\n      return DT_STRING;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196311,
		"snippet" : "      return DT_INVALID;\n  }\n}\n\ninline bool SkipEmptyFeature(protobuf::io::CodedInputStream* stream,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196319,
		"snippet" : "\n    \/\/ Extract pointers to all features within this serialized example.\n    while (!stream.ExpectAtEnd()) {\n      FeatureProtosMap* features = nullptr;\n      if (stream.ExpectTag(kDelimitedTag(1))) {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196330,
		"snippet" : "}\n\n\/\/ Populates context_features[k].length based on context_features[k].protos\n\/\/ (for all k).\nStatus GetContextFeatureLengths(const gtl::ArraySlice<tstring> example_names,\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196338,
		"snippet" : "                                 FeatureProtosMap* sequence_features) {\n  for (auto& c : *sequence_features) {\n    FeatureProtos& feature = c.second;\n    for (int d = 0; d < feature.protos.size(); ++d) {\n      const auto& proto = feature.protos[d];\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196347,
		"snippet" : "        ++num_rows;\n      }\n      switch (feature.type) {\n        case Type::Sparse:\n          feature.length += num_elements;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196403,
		"snippet" : "          \" is not consistent with output shape: \", total_shape.DebugString());\n    }\n    int64 expected_max_rows = expected_max_elements \/ row_shape.num_elements();\n    if (is_batch) {\n      dense_shape.AddDim(num_examples);\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196407,
		"snippet" : "        out_bytes = sequence_result->dense_values[t].flat<tstring>().data();\n        break;\n      case DT_FLOAT:\n        out_float = sequence_result->dense_values[t].flat<float>().data();\n        break;\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196451,
		"snippet" : "    if (is_batch) {\n      out_shape(0) = num_examples;\n      out_shape(1) = max_num_rows;\n      out_shape(2) = max_num_cols;\n    } else {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196452,
		"snippet" : "      out_shape(0) = max_num_rows;\n      out_shape(1) = max_num_cols;\n    }\n  }\n  return Status::OK();\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196466,
		"snippet" : "            feature_proto.size());\n        EnableAliasing(&stream);\n        while (!stream.ExpectAtEnd()) {\n          uint32 feature_length;\n          if (!stream.ExpectTag(kDelimitedTag(1)) ||\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196505,
		"snippet" : "  \/\/ Scan through the protos to determine how much memory we need to allocate.\n  TF_RETURN_IF_ERROR(\n      GetContextFeatureLengths(example_names, &context_features));\n  TF_RETURN_IF_ERROR(\n      GetSequenceFeatureLengths(example_names, &sequence_features));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/example_proto_fast_parsing.cc"
	},
	{
		"id" : 196547,
		"snippet" : "#include \"tensorflow\/core\/util\/exec_on_stall.h\"\n\n#include \"tensorflow\/core\/platform\/macros.h\"\n#include \"tensorflow\/core\/platform\/mutex.h\"\n#include \"tensorflow\/core\/platform\/test.h\"\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/exec_on_stall_test.cc"
	},
	{
		"id" : 196940,
		"snippet" : "}\n\nMovingAverage::~MovingAverage() { delete[] data_; }\n\nvoid MovingAverage::Clear() {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/util.cc"
	},
	{
		"id" : 197116,
		"snippet" : "    TF_EXPECT_OK(writer.Add(\"bar_001\", Constant_2x3(T(1))));\n    TF_ASSERT_OK(writer.Finish());\n  }\n  {\n    BundleReader reader(Env::Default(), Prefix(\"bar\"));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_bundle\/tensor_bundle_test.cc"
	},
	{
		"id" : 197119,
		"snippet" : "    BundleReader reader(Env::Default(), Prefix(\"bar\"));\n    TF_ASSERT_OK(reader.status());\n    ExpectNext<T>(&reader, Constant_2x3(T(0)));\n    ExpectNext<T>(&reader, Constant_2x3(T(1)));\n    ExpectNext<T>(&reader, Constant_2x3(T(2)));\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_bundle\/tensor_bundle_test.cc"
	},
	{
		"id" : 197164,
		"snippet" : "    Expect<T>(&reader, \"foo_001\", Constant_2x3<T>(T(1)));\n    Expect<T>(&reader, \"foo_002\", Constant_2x3<T>(T(2)));\n    Expect<T>(&reader, \"foo_003\", Constant_2x3<T>(T(3)));\n  }\n  {\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_bundle\/tensor_bundle_test.cc"
	},
	{
		"id" : 197170,
		"snippet" : "    TF_ASSERT_OK(writer.Finish());\n  }\n  {\n    BundleReader reader(Env::Default(), Prefix(\"nonstandard\"));\n    TF_ASSERT_OK(reader.status());\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_bundle\/tensor_bundle_test.cc"
	},
	{
		"id" : 197223,
		"snippet" : "        &reader, \"strs\",\n        test::AsTensor<tstring>({\"hello\", \"\", \"x01\", string(1 << 25, 'c')}));\n\n    Expect<float>(&reader, \"floats\", Constant_2x3<float>(16.18));\n\n",
		"language" : "C++",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/core\/util\/tensor_bundle\/tensor_bundle_test.cc"
	}
]}
