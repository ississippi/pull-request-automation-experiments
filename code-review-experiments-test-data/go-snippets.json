{
"snippets": [
	{
		"id" : 899845,
		"snippet" : "You may obtain a copy of the License at\n\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor_handle.go"
	},
	{
		"id" : 899905,
		"snippet" : "\/*\nCopyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor_test.go"
	},
	{
		"id" : 899931,
		"snippet" : "\t\tfloat64(5),\n\t\tcomplex(float32(5), float32(6)),\n\t\tcomplex(float64(5), float64(6)),\n\t\t[]float64{1},\n\t\t[][]float32{{1, 2}, {3, 4}, {5, 6}},\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor_test.go"
	},
	{
		"id" : 899959,
		"snippet" : "\t\tfor j := 0; j < 3; j++ {\n\t\t\tif abtsf32[i][j] != expected[i][j] {\n\t\t\t\tt.Errorf(\"value at %d %d not equal %f %f\", i, j, abtsf32[i][j], expected[i][j])\n\t\t\t}\n\t\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor_test.go"
	},
	{
		"id" : 900016,
		"snippet" : "\t\t\tInt32,\n\t\t},\n\t\t{ \/\/ Matrix\n\t\t\t[][]float64{\n\t\t\t\t{1, 2, 3},\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900027,
		"snippet" : "\tx, err := Placeholder(g, \"x\", Float)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ty, err := Placeholder(g, \"y\", Float)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900029,
		"snippet" : "\t\tt.Fatal(err)\n\t}\n\taddOp := add.Op\n\n\tif out := addOp.NumInputs(); out != 2 {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900032,
		"snippet" : "\ta, err := Neg(g, \"a\", x)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tb, err := Neg(g, \"b\", x)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900040,
		"snippet" : "\t}\n\top, err := graph.AddOperation(OpSpec{\n\t\tType: \"Const\",\n\t\tName: \"Const\",\n\t\tAttrs: map[string]interface{}{\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900044,
		"snippet" : "\truntime.ReadMemStats(&mem)\n\t\/\/ It was empirically observed that without this extra allocation\n\t\/\/ TestOperationLifetime would fail only 50% of the time if\n\t\/\/ Operation did not hold on to a reference to Graph. With this\n\t\/\/ additional allocation, and with the bug where Operation does\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation_test.go"
	},
	{
		"id" : 900049,
		"snippet" : "\npackage tensorflow\n\nimport (\n\t\"fmt\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/signature_test.go"
	},
	{
		"id" : 900068,
		"snippet" : "\t\t\t\tShape: MakeShape(4, 5, 6),\n\t\t\t},\n\t\t},\n\t\tMethodName: \"method\",\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/signature_test.go"
	},
	{
		"id" : 900074,
		"snippet" : "\nfunc TestTensorInfoFromProto(t *testing.T) {\n\tgot := tensorInfoFromProto(&corepb.TensorInfo{\n\t\tEncoding: &corepb.TensorInfo_Name{\n\t\t\tName: \"tensor\",\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/signature_test.go"
	},
	{
		"id" : 900083,
		"snippet" : "\t\treturn \"\", err\n\t}\n\tshapeLen := len(aShape)\n\tif len(bShape) > shapeLen {\n\t\tshapeLen = len(bShape)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/signature_test.go"
	},
	{
		"id" : 900094,
		"snippet" : "\n\tinList := map[string]bool{}\n\tfor _, op := range g.Operations() {\n\t\tinList[op.Name()] = true\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph_test.go"
	},
	{
		"id" : 900097,
		"snippet" : "\n\treturn nil\n}\n\nfunc TestGraphWriteToAndImport(t *testing.T) {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph_test.go"
	},
	{
		"id" : 900107,
		"snippet" : "\t\/\/ Serialize the graph\n\tbuf := new(bytes.Buffer)\n\tif _, err := g.WriteTo(buf); err != nil {\n\t\tt.Fatal(err)\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph_test.go"
	},
	{
		"id" : 900128,
		"snippet" : "\t}\n\tif grads1[0].DataType() != Float {\n\t\tt.Fatalf(\"Got DataType %v, wanted %v\", grads1[0].DataType(), Float)\n\t}\n\tif grads1[1].DataType() != Float {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph_test.go"
	},
	{
		"id" : 900213,
		"snippet" : "\t}\n\tn, err := w.Write(slice)\n\treturn int64(n), err\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900219,
		"snippet" : "\tdefer C.TF_DeleteBuffer(buf)\n\tbuf.length = C.size_t(len(def))\n\tbuf.data = C.CBytes(def)\n\tif buf.data == nil {\n\t\treturn fmt.Errorf(\"unable to allocate memory\")\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900230,
		"snippet" : "\/\/ prefix, if non-empty, is the name prefix used for all operations added to the graph to compute\n\/\/ these gradients.\nfunc (g *Graph) AddGradients(prefix string, y []Output, x []Output, dx []Output) ([]Output, error) {\n\tvar (\n\t\tcprefix *C.char\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900237,
		"snippet" : "\t\t\tcdx[i] = o.c()\n\t\t}\n\t}\n\n\t\/\/ If prefix is \"\", the C.TF_AddGradientsWithPrefix need cprefix to be nil but not \"\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900244,
		"snippet" : "\t\/\/ of other operations already added to the Graph.\n\t\/\/\n\t\/\/ An operation may have multiple inputs with individual inputs being\n\t\/\/ either a single tensor produced by another operation or a list of\n\t\/\/ tensors produced by multiple operations. For example, the \"Concat\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900260,
		"snippet" : "\tif err := status.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Operation{c, g}, nil\n}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/graph.go"
	},
	{
		"id" : 900294,
		"snippet" : "You may obtain a copy of the License at\n\n    http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor_handle_test.go"
	},
	{
		"id" : 900326,
		"snippet" : "\n\tstatus := newStatus()\n\tmeta := C.TF_OperationGetAttrMetadata(op.c, cname, status.c)\n\tif err := status.Err(); err != nil {\n\t\treturn nil, err\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/attrs.go"
	},
	{
		"id" : 900372,
		"snippet" : "    TF_TString_Copy(tstr, _GoStringPtr(gstr), _GoStringLen(gstr));\n}\n*\/\nimport \"C\"\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor.go"
	},
	{
		"id" : 900375,
		"snippet" : "\/\/ DataType holds the type for a scalar value.  E.g., one slot in a tensor.\ntype DataType C.TF_DataType\n\n\/\/ Types of scalar values in the TensorFlow type system.\nconst (\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor.go"
	},
	{
		"id" : 900381,
		"snippet" : "type Tensor struct {\n\tc     *C.TF_Tensor\n\tshape []int64\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor.go"
	},
	{
		"id" : 900414,
		"snippet" : "\tif err := status.Err(); err != nil {\n\t\treturn err\n\t}\n\tt.shape = newShape\n\treturn nil\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor.go"
	},
	{
		"id" : 900417,
		"snippet" : "func (t *Tensor) Value() interface{} {\n\traw := tensorData(t.c)\n\tshape := t.Shape()\n\tdt := t.DataType()\n\treturn decodeTensor(raw, shape, dt).Interface()\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/tensor.go"
	},
	{
		"id" : 900480,
		"snippet" : "\npackage tensorflow\n\nimport (\n\t\"fmt\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/shape_test.go"
	},
	{
		"id" : 900482,
		"snippet" : "\ttests := []struct {\n\t\tshape Shape\n\t\tslice []int64\n\t\tfull  bool\n\t\tstr   string\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/shape_test.go"
	},
	{
		"id" : 900491,
		"snippet" : "\tvar s Shape\n\tif s.NumDimensions() != -1 {\n\t\tt.Error(s.NumDimensions())\n\t}\n\tif _, err := s.ToSlice(); err == nil {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/shape_test.go"
	},
	{
		"id" : 900502,
		"snippet" : "\n\tsub := s.SubScope(\"sub\")\n\tgrads1 := Gradients(sub, []tf.Output{y2}, []tf.Output{x1, x2})\n\tif err := sub.Err(); err != nil {\n\t\tt.Fatal(err)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/gradients_test.go"
	},
	{
		"id" : 900535,
		"snippet" : "\n\tGradients(sub, []tf.Output{y0}, []tf.Output{x})\n\tif err := s.Err(); err == nil {\n\t\tt.Error(\"Gradients should have failed if executed more than once for scope of the same namespace\")\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/gradients_test.go"
	},
	{
		"id" : 900559,
		"snippet" : "\t\/\/ underlying array.  If the copy is correctly performed, overwriting\n\t\/\/ readDeps[0] should have no effect on control dependencies for `read`.\n\treadDeps[0] = init\n\tread := ReadVariableOp(s, variable, tf.Int32)\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/scope_test.go"
	},
	{
		"id" : 900610,
		"snippet" : "\tPlaceholder(s.SubScope(\"y\"), tf.Float, PlaceholderShape(tf.ScalarShape()))\n\tPlaceholder(s.SubScope(\"z\"), tf.Float, PlaceholderShape(tf.Shape{}))\n\tif _, err := s.Finalize(); err != nil {\n\t\tt.Fatal(err)\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/op_test.go"
	},
	{
		"id" : 900617,
		"snippet" : "\tz := Add(s, x, y)\n\tgraph, err := s.Finalize()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/op_test.go"
	},
	{
		"id" : 900623,
		"snippet" : "func TestDataset(t *testing.T) {\n\tvar (\n\t\ts = NewScope()\n\n\t\t\/\/ The use of a non-scalar here is inspired by\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/op\/op_test.go"
	},
	{
		"id" : 900681,
		"snippet" : "\npackage tensorflow\n\n\/\/ #include \"tensorflow\/c\/c_api.h\"\nimport \"C\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/status.go"
	},
	{
		"id" : 900691,
		"snippet" : "\/*\nCopyright 2018 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/context.go"
	},
	{
		"id" : 900711,
		"snippet" : "func (c *Context) ListDevices() ([]Device, error) {\n\tstatus := newStatus()\n\tdevicesList := C.TFE_ContextListDevices(c.c, status.c)\n\tif err := status.Err(); err != nil {\n\t\treturn nil, fmt.Errorf(\"SessionListDevices() failed: %v\", err)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/context.go"
	},
	{
		"id" : 900732,
		"snippet" : "\ttensor, err := makeTensorFromImage(*imagefile)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\toutput, err := session.Run(\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/example_inception_inference_test.go"
	},
	{
		"id" : 900757,
		"snippet" : "\t\tzipfile = filepath.Join(dir, \"inception5h.zip\")\n\t)\n\tif filesExist(model, labels) == nil {\n\t\treturn model, labels, nil\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/example_inception_inference_test.go"
	},
	{
		"id" : 900779,
		"snippet" : "\tcases := []OpSpec{\n\t\t{\n\t\t\tName: \"type\",\n\t\t\tType: \"Placeholder\",\n\t\t\tAttrs: map[string]interface{}{\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/attrs_test.go"
	},
	{
		"id" : 900781,
		"snippet" : "\t\t\tType: \"Bucketize\",\n\t\t\tInput: []Input{\n\t\t\t\tmakeConst([]float32{1, 2, 3, 4}),\n\t\t\t},\n\t\t\tAttrs: map[string]interface{}{\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/attrs_test.go"
	},
	{
		"id" : 900794,
		"snippet" : "\t\t\t},\n\t\t\tAttrs: map[string]interface{}{\n\t\t\t\t\"num_buckets\": int64(2),\n\t\t\t\t\"key\":         []int64{1, 2},\n\t\t\t},\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/attrs_test.go"
	},
	{
		"id" : 900804,
		"snippet" : "\t\top, err := g.AddOperation(spec)\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tfor key, want := range spec.Attrs {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/attrs_test.go"
	},
	{
		"id" : 900818,
		"snippet" : "\t\t\tfoundCPUDevice = true\n\t\t}\n\t}\n\tif !foundCPUDevice {\n\t\tt.Error(\"Failed to find CPU device using ListDevices()\")\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/context_test.go"
	},
	{
		"id" : 900828,
		"snippet" : "\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Unable to read %s: %v\", *header, err)\n\t\t}\n\t\tbuf.Write(hdr)\n\t\tbuf.WriteString(\"\\n\\n\")\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/main.go"
	},
	{
		"id" : 900832,
		"snippet" : "\/*\nCopyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900853,
		"snippet" : "    >\n  >\n>\n`,\n\t\t\tapidef: `\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900863,
		"snippet" : "`,\n\t\t\tapidef: `\nop: <\ngraph_op_name: \"Cast\"\nsummary: \"Cast x of type SrcT to y of DstT.\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900868,
		"snippet" : "\t\t},\n\t\t{\n\t\t\ttag: \"OptionalAttributes\",\n\t\t\topdef: `\nname: \"DecodeJpeg\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900892,
		"snippet" : "\t\t},\n\t\tAttrs: attrs,\n\t}\n\top := scope.AddOperation(opspec)\n\treturn op.Output(0)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900912,
		"snippet" : "\n\/\/ ShapeNOutType sets the optional out_type attribute to value.\n\/\/ If not specified, defaults to DT_INT32\nfunc ShapeNOutType(value tf.DataType) ShapeNAttr {\n\treturn func(m optionalAttr) {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900933,
		"snippet" : "\t}\n}\n\n\/\/ Summary for TestOp.\n\/\/\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900966,
		"snippet" : "  attr {\n    name: \"area_range\"\n    description: \"Blah blah\"\n  }\n  attr {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900987,
		"snippet" : "\t}\n\tattrs := map[string]interface{}{}\n\tfor _, a := range optional {\n\t\ta(attrs)\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900988,
		"snippet" : "\topspec := tf.OpSpec{\n\t\tType: \"SampleDistortedBoundingBox\",\n\t\tInput: []tf.Input{\n\t\t\timage_size, bounding_boxes,\n\t\t},\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop_test.go"
	},
	{
		"id" : 900998,
		"snippet" : "\npackage internal\n\n\/*\n#include <stdlib.h>\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/api_def_map.go"
	},
	{
		"id" : 901011,
		"snippet" : "\treturn apimap, nil\n}\n\n\/\/ Updates apiDefMap with the overrides specified in `data`.\n\/\/\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/api_def_map.go"
	},
	{
		"id" : 901049,
		"snippet" : "\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := generateFunctionForOp(w, op, apidef); err != nil {\n\t\t\treturn err\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop.go"
	},
	{
		"id" : 901113,
		"snippet" : "\t\tcase in.TypeListAttr != \"\":\n\t\t\tinferred[in.TypeListAttr] = true\n\t\t}\n\t\tif in.NumberAttr != \"\" {\n\t\t\tinferred[in.NumberAttr] = true\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop.go"
	},
	{
		"id" : 901137,
		"snippet" : "}\n\n\/\/ stripLeadingColon removes the prefix of the string up to the first colon.\n\/\/\n\/\/ This is useful when 's' corresponds to a \"oneof\" protocol buffer message.\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop.go"
	},
	{
		"id" : 901140,
		"snippet" : "\treturn y[1]\n}\n\nfunc parseTFType(tfType string) (list bool, typ string) {\n\tconst (\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/genop\/internal\/genop.go"
	},
	{
		"id" : 901198,
		"snippet" : "\tout, err := Neg(g, \"neg1\", inp)\n\tif err != nil {\n\t\tt.Fatalf(\"Neg() for %v: %v\", dt, err)\n\t}\n\treturn g, inp, out\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901211,
		"snippet" : "\t\t\tType: \"Mul\",\n\t\t\tName: fmt.Sprintf(\"Mul%d\", i),\n\t\t\tInput: []Input{\n\t\t\t\tin,\n\t\t\t\tfactor,\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901212,
		"snippet" : "\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901218,
		"snippet" : "\t\ttensor, err := NewTensor(int64(i + 1))\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tfeeds[in] = tensor\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901253,
		"snippet" : "\t\t\/\/ The 'op' package can be used to make graph construction code\n\t\t\/\/ with error handling more succinct.\n\t\tg        = NewGraph()\n\t\ta, _     = Placeholder(g, \"a\", Int32)\n\t\tb, _     = Placeholder(g, \"b\", Int32)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901267,
		"snippet" : "\t\/*\n\t import tensorflow\n\t c = tensorflow.ConfigProto()\n\t c.intra_op_parallelism_threads = 1\n\t print c.SerializeToString()\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901275,
		"snippet" : "\nfunc TestDeviceString(t *testing.T) {\n\td := Device{Name: \"foo\", Type: \"bar\", MemoryLimitBytes: 12345}\n\tgot := d.String()\n\twant := \"(Device: name \\\"foo\\\", type bar, memory limit 12345 bytes)\"\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session_test.go"
	},
	{
		"id" : 901284,
		"snippet" : "}\n\n\/\/ Name returns the name of the operation.\nfunc (op *Operation) Name() string {\n\treturn C.GoString(C.TF_OperationName(op.c))\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation.go"
	},
	{
		"id" : 901287,
		"snippet" : "}\n\n\/\/ Device returns a specification of the device on which this operation\n\/\/ will be executed, or the empty string if there is no such specification.\nfunc (op *Operation) Device() string {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation.go"
	},
	{
		"id" : 901313,
		"snippet" : "\t\tpanic(\"nil-Operation. Consumer objects should only be created by a call to Output.Consumers\")\n\t}\n\treturn C.TF_Input{oper: p.Op.c, index: C.int(p.Index)}\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/operation.go"
	},
	{
		"id" : 901348,
		"snippet" : "\tif s.c == nil {\n\t\ts.mu.Unlock()\n\t\treturn nil, errors.New(\"session is closed\")\n\t}\n\ts.wg.Add(1)\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session.go"
	},
	{
		"id" : 901363,
		"snippet" : "\/\/ All values of feeds, fetches and targets that may be provided to Run calls\n\/\/ on the returned PartialRun need to be provided to NewPartialRun.\n\/\/\n\/\/ See documentation for the PartialRun type.\nfunc (s *Session) NewPartialRun(feeds, fetches []Output, targets []*Operation) (*PartialRun, error) {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session.go"
	},
	{
		"id" : 901367,
		"snippet" : "\t\t}\n\t}\n\tif len(fetches) > 0 {\n\t\tpcfetches = &cfetches[0]\n\t\tfor i, o := range fetches {\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session.go"
	},
	{
		"id" : 901385,
		"snippet" : "\n\/\/ c converts the SessionOptions to the C API's TF_SessionOptions. Callers must\n\/\/ deallocate by calling the returned done() closure.\nfunc (o *SessionOptions) c() (ret *C.TF_SessionOptions, done func(), err error) {\n\topt := C.TF_NewSessionOptions()\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session.go"
	},
	{
		"id" : 901401,
		"snippet" : "\t\/\/ them. We'll eventually enumerate every possible order and store it in the\n\t\/\/ executor cache. With n inputs that's n! entries. That gets very big very\n\t\/\/ quickly.\n\tfor o, t := range feeds {\n\t\tc.feeds = append(c.feeds, o.c())\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/session.go"
	},
	{
		"id" : 901416,
		"snippet" : "\n\/\/ SavedModel represents the contents of loaded SavedModel.\n\/\/ TODO(jhseu): Add and document metagraphdef when we pregenerate protobufs.\ntype SavedModel struct {\n\tSession    *Session\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/saved_model.go"
	},
	{
		"id" : 901426,
		"snippet" : "\t\treturn nil, err\n\t}\n\n\tsignatures := generateSignatures(metaGraphDef.GetSignatureDef())\n\n",
		"language" : "Go",
		"repo_file_name" : "tensorflow\/tensorflow\/tensorflow\/go\/saved_model.go"
	},
	{
		"id" : 1455434,
		"snippet" : "\tmockT := new(MockT)\n\tmockRequire := New(mockT)\n\tmockRequire.IsType(new(AssertionTesterConformingObject), new(AssertionTesterNonConformingObject))\n\tif !mockT.Failed {\n\t\tt.Error(\"Check should fail\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455453,
		"snippet" : "}\n\nfunc TestContainsWrapper(t *testing.T) {\n\trequire := New(t)\n\trequire.Contains(\"Hello World\", \"Hello\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455472,
		"snippet" : "\tmockRequire := New(mockT)\n\tmockRequire.EqualError(errors.New(\"some error\"), \"Not some error\")\n\tif !mockT.Failed {\n\t\tt.Error(\"Check should fail\")\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455481,
		"snippet" : "\nfunc TestInDeltaWrapper(t *testing.T) {\n\trequire := New(t)\n\trequire.InDelta(1.001, 1, 0.01)\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455492,
		"snippet" : "}\n\nfunc TestJSONEqWrapper_HashOfArraysAndHashes(t *testing.T) {\n\tmockT := new(MockT)\n\tmockRequire := New(mockT)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455505,
		"snippet" : "\tmockRequire := New(mockT)\n\n\tmockRequire.JSONEq(\"Not JSON\", \"Not JSON\")\n\tif !mockT.Failed {\n\t\tt.Error(\"Check should fail\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455510,
		"snippet" : "\t}\n}\n\nfunc TestYAMLEqWrapper_EquivalentButNotEqual(t *testing.T) {\n\tmockT := new(MockT)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455515,
		"snippet" : "  nested: hash\n  nested_slice: [this, is, nested]\nstring: \"foo\"\n`\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/forward_requirements_test.go"
	},
	{
		"id" : 1455538,
		"snippet" : "package require\n\nimport (\n\t\"encoding\/json\"\n\t\"errors\"\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455565,
		"snippet" : "\tif !mockT.Failed {\n\t\tt.Error(\"Check should fail\")\n\t}\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455601,
		"snippet" : "}\n\nfunc TestJSONEq_HashOfArraysAndHashes(t *testing.T) {\n\tmockT := new(MockT)\n\tJSONEq(mockT, \"{\\r\\n\\t\\\"numeric\\\": 1.5,\\r\\n\\t\\\"array\\\": [{\\\"foo\\\": \\\"bar\\\"}, 1, \\\"string\\\", [\\\"nested\\\", \\\"array\\\", 5.5]],\\r\\n\\t\\\"hash\\\": {\\\"nested\\\": \\\"hash\\\", \\\"nested_slice\\\": [\\\"this\\\", \\\"is\\\", \\\"nested\\\"]},\\r\\n\\t\\\"string\\\": \\\"foo\\\"\\r\\n}\",\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455617,
		"snippet" : "\t}\n}\n\nfunc TestYAMLEq_HashOfArraysAndHashes(t *testing.T) {\n\tmockT := new(MockT)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455634,
		"snippet" : "\tmockT := new(MockT)\n\tYAMLEq(mockT, `[\"foo\", {\"hello\": \"world\", \"nested\": \"hash\"}]`, `[{ \"hello\": \"world\", \"nested\": \"hash\"}, \"foo\"]`)\n\tif !mockT.Failed {\n\t\tt.Error(\"Check should fail\")\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455653,
		"snippet" : "\t}\n}\n\nfunc TestValueAssertionFunc(t *testing.T) {\n\ttests := []struct {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/requirements_test.go"
	},
	{
		"id" : 1455679,
		"snippet" : "\t\th.Helper()\n\t}\n\tConditionf(a.t, comp, msg, args...)\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455701,
		"snippet" : "\/\/ and that it is equal to the provided error.\n\/\/\n\/\/   actualObj, err := SomeFunction()\n\/\/   a.EqualError(err,  expectedErrorString)\nfunc (a *Assertions) EqualError(theError error, errString string, msgAndArgs ...interface{}) {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455772,
		"snippet" : "\t}\n\tHTTPBodyNotContainsf(a.t, handler, method, url, values, str, msg, args...)\n}\n\n\/\/ HTTPError asserts that a specified handler returns an error status code.\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455778,
		"snippet" : "\/\/  a.HTTPRedirect(myHandler, \"GET\", \"\/a\/b\/c\", url.Values{\"a\": []string{\"b\", \"c\"}}\n\/\/\n\/\/ Returns whether the assertion was successful (true) or not (false).\nfunc (a *Assertions) HTTPRedirect(handler http.HandlerFunc, method string, url string, values url.Values, msgAndArgs ...interface{}) {\n\tif h, ok := a.t.(tHelper); ok {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455815,
		"snippet" : "\n\/\/ IsDecreasingf asserts that the collection is decreasing\n\/\/\n\/\/    a.IsDecreasingf([]int{2, 1, 0}, \"error message %s\", \"formatted\")\n\/\/    a.IsDecreasingf([]float{2, 1}, \"error message %s\", \"formatted\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455822,
		"snippet" : "}\n\n\/\/ IsNonDecreasing asserts that the collection is not decreasing\n\/\/\n\/\/    a.IsNonDecreasing([]int{1, 1, 2})\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455847,
		"snippet" : "\/\/    a.LessOrEqual(\"b\", \"b\")\nfunc (a *Assertions) LessOrEqual(e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) {\n\tif h, ok := a.t.(tHelper); ok {\n\t\th.Helper()\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1455960,
		"snippet" : "\t}\n\tTrue(a.t, value, msgAndArgs...)\n}\n\n\/\/ Truef asserts that the specified value is true.\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require_forward.go"
	},
	{
		"id" : 1456022,
		"snippet" : "\t}\n\tif assert.Equalf(t, expected, actual, msg, args...) {\n\t\treturn\n\t}\n\tt.FailNow()\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456071,
		"snippet" : "\t\th.Helper()\n\t}\n\tif assert.FileExists(t, path, msgAndArgs...) {\n\t\treturn\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456076,
		"snippet" : "func Greater(t TestingT, e1 interface{}, e2 interface{}, msgAndArgs ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\tif assert.Greater(t, e1, e2, msgAndArgs...) {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456080,
		"snippet" : "\tif assert.GreaterOrEqual(t, e1, e2, msgAndArgs...) {\n\t\treturn\n\t}\n\tt.FailNow()\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456097,
		"snippet" : "\/\/ HTTPBodyNotContainsf asserts that a specified handler returns a\n\/\/ body that does not contain a string.\n\/\/\n\/\/  assert.HTTPBodyNotContainsf(t, myHandler, \"GET\", \"www.google.com\", nil, \"I'm Feeling Lucky\", \"error message %s\", \"formatted\")\n\/\/\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456152,
		"snippet" : "\n\/\/ IsDecreasing asserts that the collection is decreasing\n\/\/\n\/\/    assert.IsDecreasing(t, []int{2, 1, 0})\n\/\/    assert.IsDecreasing(t, []float{2, 1})\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456179,
		"snippet" : "\t\th.Helper()\n\t}\n\tif assert.IsTypef(t, expectedType, object, msg, args...) {\n\t\treturn\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456187,
		"snippet" : "\t\th.Helper()\n\t}\n\tif assert.Len(t, object, length, msgAndArgs...) {\n\t\treturn\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456229,
		"snippet" : "\/\/ \t   assert.Equal(t, expectedObj, actualObj)\n\/\/   }\nfunc NoErrorf(t TestingT, err error, msg string, args ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456237,
		"snippet" : "\/\/    assert.NotContains(t, [\"Hello\", \"World\"], \"Earth\")\n\/\/    assert.NotContains(t, {\"Hello\": \"World\"}, \"Earth\")\nfunc NotContains(t TestingT, s interface{}, contains interface{}, msgAndArgs ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456258,
		"snippet" : "\/\/\n\/\/ Pointer variable equality is determined based on the equality of the\n\/\/ referenced values (as opposed to the memory addresses).\nfunc NotEqualf(t TestingT, expected interface{}, actual interface{}, msg string, args ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456303,
		"snippet" : "}\n\n\/\/ PanicsWithErrorf asserts that the code inside the specified PanicTestFunc\n\/\/ panics, and that the recovered panic value is an error that satisfies the\n\/\/ EqualError comparison.\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456346,
		"snippet" : "\/\/   assert.WithinDurationf(t, time.Now(), time.Now(), 10*time.Second, \"error message %s\", \"formatted\")\nfunc WithinDurationf(t TestingT, expected time.Time, actual time.Time, delta time.Duration, msg string, args ...interface{}) {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/require\/require.go"
	},
	{
		"id" : 1456504,
		"snippet" : "func (f *testFunc) Qualifier(p *types.Package) string {\n\tif p == nil || p.Name() == f.CurrentPkg {\n\t\treturn \"\"\n\t}\n\treturn p.Name()\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/_codegen\/main.go"
	},
	{
		"id" : 1456549,
		"snippet" : "\t}\n}\n\nfunc (s *panickingSuite) Test() {\n\tif s.panicInTest {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite_test.go"
	},
	{
		"id" : 1456622,
		"snippet" : "\t\/\/ Failed tests' output is always printed\n\tassert.Contains(t, output, \"TESTLOGFAIL\")\n\n\tif testing.Verbose() {\n\t\t\/\/ In verbose mode, output from successful tests is also printed\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite_test.go"
	},
	{
		"id" : 1456625,
		"snippet" : "\nfunc (s *CallOrderSuite) call(method string) {\n\ttime.Sleep(time.Duration(rand.Intn(300)) * time.Millisecond)\n\ts.callOrder = append(s.callOrder, method)\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite_test.go"
	},
	{
		"id" : 1456652,
		"snippet" : "\t\"os\"\n\t\"reflect\"\n\t\"regexp\"\n\t\"runtime\/debug\"\n\t\"testing\"\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite.go"
	},
	{
		"id" : 1456660,
		"snippet" : "}\n\n\/\/ Assert returns an assert context for suite.  Normally, you can call\n\/\/ `suite.NoError(expected, actual)`, but for situations where the embedded\n\/\/ methods are overridden (for example, you might want to override\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite.go"
	},
	{
		"id" : 1456680,
		"snippet" : "\n\t\t\t\tif setupTestSuite, ok := suite.(SetupTestSuite); ok {\n\t\t\t\t\tsetupTestSuite.SetupTest()\n\t\t\t\t}\n\t\t\t\tif beforeTestSuite, ok := suite.(BeforeTest); ok {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite.go"
	},
	{
		"id" : 1456686,
		"snippet" : "\trunTests(t, tests)\n}\n\n\/\/ Filtering method according to set regular expression\n\/\/ specified command-line argument -m\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/suite\/suite.go"
	},
	{
		"id" : 1456745,
		"snippet" : "\t\t{less: customInt16(1), greater: customInt16(2), cType: \"int16\"},\n\t\t{less: int16(1), greater: int16(2), cType: \"int16\"},\n\t\t{less: customInt32(1), greater: customInt32(2), cType: \"int32\"},\n\t\t{less: int32(1), greater: int32(2), cType: \"int32\"},\n\t\t{less: customInt64(1), greater: customInt64(2), cType: \"int64\"},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_compare_test.go"
	},
	{
		"id" : 1456785,
		"snippet" : "\t\tContains(t, out.helpers, \"github.com\/stretchr\/testify\/assert.Less\")\n\t}\n}\n\nfunc TestLessOrEqual(t *testing.T) {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_compare_test.go"
	},
	{
		"id" : 1456791,
		"snippet" : "\t\t{less: int64(1), greater: int64(2), msg: `\"2\" is not less than or equal to \"1\"`},\n\t\t{less: uint8(1), greater: uint8(2), msg: `\"2\" is not less than or equal to \"1\"`},\n\t\t{less: uint16(1), greater: uint16(2), msg: `\"2\" is not less than or equal to \"1\"`},\n\t\t{less: uint32(1), greater: uint32(2), msg: `\"2\" is not less than or equal to \"1\"`},\n\t\t{less: uint64(1), greater: uint64(2), msg: `\"2\" is not less than or equal to \"1\"`},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_compare_test.go"
	},
	{
		"id" : 1456807,
		"snippet" : "\t\t{e: int16(1), msg: `\"1\" is not negative`},\n\t\t{e: int32(1), msg: `\"1\" is not negative`},\n\t\t{e: int64(1), msg: `\"1\" is not negative`},\n\t\t{e: float32(1.23), msg: `\"1.23\" is not negative`},\n\t\t{e: float64(1.23), msg: `\"1.23\" is not negative`},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_compare_test.go"
	},
	{
		"id" : 1456821,
		"snippet" : "func Test_containsValue(t *testing.T) {\n\tfor _, currCase := range []struct {\n\t\tvalues []CompareType\n\t\tvalue  CompareType\n\t\tresult bool\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_compare_test.go"
	},
	{
		"id" : 1456831,
		"snippet" : "\t\t\"\",\n\t\t[0]interface{}{},\n\t\t[]interface{}(nil),\n\t\tstruct{ x int }{},\n\t\t(*interface{})(nil),\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456836,
		"snippet" : "\t\trune(1),\n\t\tuint(1),\n\t\tuint8(1),\n\t\tuint16(1),\n\t\tuint32(1),\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456844,
		"snippet" : "\t\tactual   interface{}\n\t\tresult   bool\n\t}{\n\t\t\/\/ cases that are expected to be equal\n\t\t{\"Hello World\", \"Hello World\", true},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456847,
		"snippet" : "\t\t{0.1, 0, false},\n\t\t{time.Now, time.Now, false},\n\t\t{func() {}, func() {}, false},\n\t\t{uint32(10), int32(10), false},\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456884,
		"snippet" : "}\n\n\/\/ bufferT implements TestingT. Its implementation of Errorf writes the output that would be produced by\n\/\/ testing.T.Errorf to an internal bytes.Buffer.\ntype bufferT struct {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456890,
		"snippet" : "\t\t}\n\t\tfor i, line := range lines {\n\t\t\tif i > 0 {\n\t\t\t\t\/\/ Second and subsequent lines are indented an extra tab.\n\t\t\t\tbuf.WriteString(\"\\n\\t\\t\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456930,
		"snippet" : "}\n\nfunc TestNotEqualValues(t *testing.T) {\n\tmockT := new(testing.T)\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456968,
		"snippet" : "\n\tok, found = includeElement(list1, \"Foo\")\n\tTrue(t, ok)\n\tTrue(t, found)\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456982,
		"snippet" : "\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(fmt.Sprintf(\"ElementsMatch(%#v, %#v)\", c.expected, c.actual), func(t *testing.T) {\n\t\t\tres := ElementsMatch(mockT, c.actual, c.expected)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456989,
		"snippet" : "\t\t{\n\t\t\tname:   \"equal different order\",\n\t\t\tlistA:  []string{\"hello\", \"world\"},\n\t\t\tlistB:  []string{\"world\", \"hello\"},\n\t\t\textraA: nil,\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456992,
		"snippet" : "\t\t\tname:   \"extra A twice\",\n\t\t\tlistA:  []string{\"hello\", \"hello\", \"hello\", \"world\"},\n\t\t\tlistB:  []string{\"hello\", \"world\"},\n\t\t\textraA: []interface{}{\"hello\", \"hello\"},\n\t\t\textraB: nil,\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456993,
		"snippet" : "\t\t},\n\t\t{\n\t\t\tname:   \"extra B\",\n\t\t\tlistA:  []string{\"hello\", \"world\"},\n\t\t\tlistB:  []string{\"hello\", \"hello\", \"world\"},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1456997,
		"snippet" : "\t\t\textraB: nil,\n\t\t},\n\t\t{\n\t\t\tname:   \"integers 2\",\n\t\t\tlistA:  []int{1, 2, 1, 2, 1},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457001,
		"snippet" : "}\n\nfunc TestCondition(t *testing.T) {\n\tmockT := new(testing.T)\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457016,
		"snippet" : "\t}) {\n\t\tt.Error(\"PanicsWithError should return true\")\n\t}\n\n\tif PanicsWithError(mockT, \"Panic!\", func() {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457057,
		"snippet" : "\tmockT := new(testing.T)\n\tchWithValue := make(chan struct{}, 1)\n\tchWithValue <- struct{}{}\n\n\tFalse(t, NotEmpty(mockT, \"\"), \"Empty string is empty\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457081,
		"snippet" : "\n\tfor _, c := range cases {\n\t\tFalse(t, Len(mockT, c.v, c.l), \"%#v have %d items\", c.v, c.l)\n\t}\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457086,
		"snippet" : "func TestInDelta(t *testing.T) {\n\tmockT := new(testing.T)\n\n\tTrue(t, InDelta(mockT, 1.001, 1, 0.01), \"|1.001 - 1| <= 0.01\")\n\tTrue(t, InDelta(mockT, 1, 1.001, 0.01), \"|1 - 1.001| <= 0.01\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457089,
		"snippet" : "\t}{\n\t\t{uint(2), uint(1), 1},\n\t\t{uint8(2), uint8(1), 1},\n\t\t{uint16(2), uint16(1), 1},\n\t\t{uint32(2), uint32(1), 1},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457111,
		"snippet" : "\t\t\t\t\"bar\":  0.0,\n\t\t\t},\n\t\t\tf: False,\n\t\t},\n\t} {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457134,
		"snippet" : "\tvar c io.Closer\n\tc = t\n\tc.Close()\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457174,
		"snippet" : "\tTrue(t, JSONEq(mockT, \"{\\r\\n\\t\\\"numeric\\\": 1.5,\\r\\n\\t\\\"array\\\": [{\\\"foo\\\": \\\"bar\\\"}, 1, \\\"string\\\", [\\\"nested\\\", \\\"array\\\", 5.5]],\\r\\n\\t\\\"hash\\\": {\\\"nested\\\": \\\"hash\\\", \\\"nested_slice\\\": [\\\"this\\\", \\\"is\\\", \\\"nested\\\"]},\\r\\n\\t\\\"string\\\": \\\"foo\\\"\\r\\n}\",\n\t\t\"{\\r\\n\\t\\\"numeric\\\": 1.5,\\r\\n\\t\\\"hash\\\": {\\\"nested\\\": \\\"hash\\\", \\\"nested_slice\\\": [\\\"this\\\", \\\"is\\\", \\\"nested\\\"]},\\r\\n\\t\\\"string\\\": \\\"foo\\\",\\r\\n\\t\\\"array\\\": [{\\\"foo\\\": \\\"bar\\\"}, 1, \\\"string\\\", [\\\"nested\\\", \\\"array\\\", 5.5]]\\r\\n}\"))\n}\n\nfunc TestJSONEq_Array(t *testing.T) {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457182,
		"snippet" : "\tmockT := new(testing.T)\n\tTrue(t, YAMLEq(mockT, `{\"hello\": \"world\", \"foo\": \"bar\"}`, `{\"hello\": \"world\", \"foo\": \"bar\"}`))\n}\n\nfunc TestYAMLEq_EquivalentButNotEqual(t *testing.T) {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457240,
		"snippet" : "\tvar cases = []struct {\n\t\ta, b []byte\n\t}{\n\t\t{make([]byte, 2), make([]byte, 2)},\n\t\t{make([]byte, 2), make([]byte, 2, 3)},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457248,
		"snippet" : "\n\ttype args struct {\n\t\tx int\n\t\ty int\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457254,
		"snippet" : "\t\tname      string\n\t\texpect    interface{}\n\t\tgot       interface{}\n\t\tassertion ComparisonAssertionFunc\n\t}{\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457269,
		"snippet" : "\nfunc ExampleBoolAssertionFunc() {\n\tt := &testing.T{} \/\/ provided by test\n\n\tisOkay := func(x int) bool {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions_test.go"
	},
	{
		"id" : 1457341,
		"snippet" : "\n\t\tf := runtime.FuncForPC(pc)\n\t\tif f == nil {\n\t\t\tbreak\n\t\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457373,
		"snippet" : "\t\t}\n\t}\n\tvar output string\n\tfor _, v := range content {\n\t\toutput += \"\\t\" + v.label + \":\" + strings.Repeat(\" \", longestLabel-len(v.label)) + \"\\t\" + indentMessageLines(v.content, longestLabel) + \"\\n\"\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457383,
		"snippet" : "\t\th.Helper()\n\t}\n\tif err := validateEqualArgs(expected, actual); err != nil {\n\t\treturn Fail(t, fmt.Sprintf(\"Invalid operation: %#v == %#v (%s)\",\n\t\t\texpected, actual, err), msgAndArgs...)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457396,
		"snippet" : "\t\t\t\"Expected and actual point to the same object: %p %#v\",\n\t\t\texpected, expected), msgAndArgs...)\n\t}\n\treturn true\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457415,
		"snippet" : "\/\/\n\/\/    assert.NotNil(t, err)\nfunc NotNil(t TestingT, object interface{}, msgAndArgs ...interface{}) bool {\n\tif !isNil(object) {\n\t\treturn true\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457425,
		"snippet" : "\t\treturn true\n\t}\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457444,
		"snippet" : "\t}\n\n\tif l != length {\n\t\treturn Fail(t, fmt.Sprintf(\"\\\"%s\\\" should have %d item(s), but has %d\", object, length, l), msgAndArgs...)\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457451,
		"snippet" : "\n}\n\n\/\/ NotEqual asserts that the specified values are NOT equal.\n\/\/\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457467,
		"snippet" : "\/\/ Contains asserts that the specified string, list(array, slice...) or map contains the\n\/\/ specified substring or element.\n\/\/\n\/\/    assert.Contains(t, \"Hello World\", \"World\")\n\/\/    assert.Contains(t, [\"Hello\", \"World\"], \"World\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457472,
		"snippet" : "\/\/\n\/\/    assert.NotContains(t, \"Hello World\", \"Earth\")\n\/\/    assert.NotContains(t, [\"Hello\", \"World\"], \"Earth\")\n\/\/    assert.NotContains(t, {\"Hello\": \"World\"}, \"Earth\")\nfunc NotContains(t TestingT, s, contains interface{}, msgAndArgs ...interface{}) bool {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457500,
		"snippet" : "\t\t\tmsgAndArgs...)\n\t}\n\treturn true\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457507,
		"snippet" : "\tfor j := 0; j < bLen; j++ {\n\t\tif visited[j] {\n\t\t\tcontinue\n\t\t}\n\t\textraB = append(extraB, bValue.Index(j).Interface())\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457516,
		"snippet" : "\n\/\/ didPanic returns true if the function passed to it panics. Otherwise, it returns false.\nfunc didPanic(f PanicTestFunc) (bool, interface{}, string) {\n\n\tdidPanic := false\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457521,
		"snippet" : "\/\/ Panics asserts that the code inside the specified PanicTestFunc panics.\n\/\/\n\/\/   assert.Panics(t, func(){ GoCrazy() })\nfunc Panics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {\n\tif h, ok := t.(tHelper); ok {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457522,
		"snippet" : "\t\th.Helper()\n\t}\n\n\tif funcDidPanic, panicValue, _ := didPanic(f); !funcDidPanic {\n\t\treturn Fail(t, fmt.Sprintf(\"func %#v should panic\\n\\tPanic value:\\t%#v\", f, panicValue), msgAndArgs...)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457527,
		"snippet" : "\t}\n\n\treturn true\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457533,
		"snippet" : "func NotPanics(t TestingT, f PanicTestFunc, msgAndArgs ...interface{}) bool {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457586,
		"snippet" : "\n\treturn true\n}\n\n\/\/ EqualError asserts that a function returned an error (i.e. not `nil`)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457587,
		"snippet" : "\/\/ and that it is equal to the provided error.\n\/\/\n\/\/   actualObj, err := SomeFunction()\n\/\/   assert.EqualError(t, err,  expectedErrorString)\nfunc EqualError(t TestingT, theError error, errString string, msgAndArgs ...interface{}) bool {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457588,
		"snippet" : "\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\tif !Error(t, theError, msgAndArgs...) {\n\t\treturn false\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457609,
		"snippet" : "\t\treturn Fail(t, fmt.Sprintf(\"Should not be zero, but was %v\", i), msgAndArgs...)\n\t}\n\treturn true\n}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457615,
		"snippet" : "\tinfo, err := os.Lstat(path)\n\tif err != nil {\n\t\treturn true\n\t}\n\tif info.IsDir() {\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457656,
		"snippet" : "\tdefer ticker.Stop()\n\n\tfor tick := ticker.C; ; {\n\t\tselect {\n\t\tcase <-timer.C:\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertions.go"
	},
	{
		"id" : 1457680,
		"snippet" : "\t}\n\treturn Contains(t, s, contains, append([]interface{}{msg}, args...)...)\n}\n\n\/\/ DirExistsf checks whether a directory exists in the given path. It also fails\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_format.go"
	},
	{
		"id" : 1457686,
		"snippet" : "\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\treturn Empty(t, object, append([]interface{}{msg}, args...)...)\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_format.go"
	},
	{
		"id" : 1457770,
		"snippet" : "func Nilf(t TestingT, object interface{}, msg string, args ...interface{}) bool {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\treturn Nil(t, object, append([]interface{}{msg}, args...)...)\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_format.go"
	},
	{
		"id" : 1457811,
		"snippet" : "\/\/  assert.Regexpf(t, regexp.MustCompile(\"start\"), \"it's starting\", \"error message %s\", \"formatted\")\n\/\/  assert.Regexpf(t, \"start...$\", \"it's not starting\", \"error message %s\", \"formatted\")\nfunc Regexpf(t TestingT, rx interface{}, str interface{}, msg string, args ...interface{}) bool {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_format.go"
	},
	{
		"id" : 1457822,
		"snippet" : "\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\treturn YAMLEq(t, expected, actual, append([]interface{}{msg}, args...)...)\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_format.go"
	},
	{
		"id" : 1457834,
		"snippet" : "}\n\nfunc TestEqualValuesWrapper(t *testing.T) {\n\tassert := New(new(testing.T))\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457838,
		"snippet" : "}\n\nfunc TestNilWrapper(t *testing.T) {\n\tassert := New(new(testing.T))\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457854,
		"snippet" : "\t}\n\tif !assert.NotEqual(nil, new(AssertionTesterConformingObject)) {\n\t\tt.Error(\"NotEqual should return true\")\n\t}\n}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457856,
		"snippet" : "\tif !assert.NotEqualValues(\"Hello World\", \"Hello World!\") {\n\t\tt.Error(\"NotEqualValues should return true\")\n\t}\n\tif !assert.NotEqualValues(123, 1234) {\n\t\tt.Error(\"NotEqualValues should return true\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457869,
		"snippet" : "\n\tif !assert.Condition(func() bool { return true }, \"Truth\") {\n\t\tt.Error(\"Condition should return true\")\n\t}\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457881,
		"snippet" : "func TestNoErrorWrapper(t *testing.T) {\n\tassert := New(t)\n\tmockAssert := New(new(testing.T))\n\n\t\/\/ start with a nil error\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457896,
		"snippet" : "\tassert.True(mockAssert.Empty(0), \"Zero int value is empty\")\n\tassert.True(mockAssert.Empty(false), \"False value is empty\")\n\n\tassert.False(mockAssert.Empty(\"something\"), \"Non Empty string is not empty\")\n\tassert.False(mockAssert.Empty(errors.New(\"something\")), \"Non nil object is not empty\")\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457920,
		"snippet" : "}\n\nfunc TestInEpsilonWrapper(t *testing.T) {\n\tassert := New(new(testing.T))\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457922,
		"snippet" : "\t\t{2.1, 2.2, 0.1},\n\t\t{2.2, 2.1, 0.1},\n\t\t{-2.1, -2.2, 0.1},\n\t\t{-2.2, -2.1, 0.1},\n\t\t{uint64(100), uint8(101), 0.01},\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457948,
		"snippet" : "func TestJSONEqWrapper_HashesNotEquivalent(t *testing.T) {\n\tassert := New(new(testing.T))\n\tif assert.JSONEq(`{\"foo\": \"bar\"}`, `{\"foo\": \"bar\", \"hello\": \"world\"}`) {\n\t\tt.Error(\"JSONEq should return false\")\n\t}\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457961,
		"snippet" : "\n\tactual := `\nnumeric: 1.5\nhash:\n  nested: hash\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457964,
		"snippet" : "\t}\n}\n\nfunc TestYAMLEqWrapper_Array(t *testing.T) {\n\tassert := New(new(testing.T))\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/forward_assertions_test.go"
	},
	{
		"id" : 1457974,
		"snippet" : "\/*\n* CODE GENERATED AUTOMATICALLY WITH github.com\/stretchr\/testify\/_codegen\n* THIS FILE MUST NOT BE EDITED BY HAND\n *\/\n\n",
		"language" : "Go",
		"repo_file_name" : "stretchr\/testify\/assert\/assertion_forward.go"
	}
]}
