{
"snippets": [
	{
		"id" : 627,
		"snippet" : "const nconf = require('nconf');\n\nconst db = require('.\/mocks\/databasemock');\nconst helpers = require('.\/helpers');\nconst Groups = require('..\/src\/groups');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 638,
		"snippet" : "\t\t\/\/ create another group that starts with test for search\/sort\n\t\tawait Groups.create({\tname: 'Test2', description: 'Foobar!' });\n\n\t\ttestUid = await User.create({\n\t\t\tusername: 'testuser',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 646,
		"snippet" : "\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 673,
		"snippet" : "\t\t\t\tassert.deepStrictEqual(isMembers, [true, false]);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 690,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 714,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 733,
		"snippet" : "\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 734,
		"snippet" : "\tdescribe('.destroy()', () => {\n\t\tbefore((done) => {\n\t\t\tGroups.join('foobar?', 1, done);\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 746,
		"snippet" : "\t\tbefore((done) => {\n\t\t\tGroups.leave('Test', testUid, done);\n\t\t});\n\n\t\tit('should add a user to a group', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 762,
		"snippet" : "\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tit('should set group title when user joins the group', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 763,
		"snippet" : "\t\t\tconst groupName = 'this will be title';\n\t\t\tUser.create({ username: 'needstitle' }, (err, uid) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tGroups.create({ name: groupName }, (err) => {\n\t\t\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 777,
		"snippet" : "\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 790,
		"snippet" : "\t\t\tsocketGroups.join({ uid: adminUid }, { groupName: 'doesnotexist' }, (err) => {\n\t\t\t\tassert.equal(err.message, '[[error:no-group]]');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 802,
		"snippet" : "\n\t\tit('should join if user is admin', (done) => {\n\t\t\tsocketGroups.join({ uid: adminUid }, { groupName: 'PrivateCanJoin' }, (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tGroups.isMember(adminUid, 'PrivateCanJoin', (err, isMember) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 804,
		"snippet" : "\t\t});\n\n\t\tit('should request membership for regular user', (done) => {\n\t\t\tsocketGroups.join({ uid: testUid }, { groupName: 'PrivateCanJoin' }, (err) => {\n\t\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 813,
		"snippet" : "\t\tit('should reject\/accept all memberships requests', (done) => {\n\t\t\tfunction requestMembership(uids, callback) {\n\t\t\t\tasync.series([\n\t\t\t\t\tfunction (next) {\n\t\t\t\t\t\tsocketGroups.join({ uid: uids.uid1 }, { groupName: 'PrivateCanJoin' }, next);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 846,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 903,
		"snippet" : "\t\t\t\t\tassert.equal(groupData.description, 'cat group');\n\t\t\t\t\tassert.equal(groupData.hidden, true);\n\t\t\t\t\tassert.equal(groupData.disableJoinRequests, true);\n\t\t\t\t\tassert.equal(groupData.private, false);\n\t\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 906,
		"snippet" : "\t\tbefore((done) => {\n\t\t\tUser.create({ username: 'regularuser', password: '123456' }, (err, uid) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tregularUid = uid;\n\t\t\t\tasync.series([\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 923,
		"snippet" : "\t\t\tsocketGroups.cover.update({ uid: adminUid }, data, (err, data) => {\n\t\t\t\tassert.equal(err.message, '[[error:invalid-image]]');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/groups.js"
	},
	{
		"id" : 952,
		"snippet" : "\n\t\tit('should handle language keys inside language keys with all parameters as language keys', () => {\n\t\t\tconst translator = Translator.create('en-GB');\n\n\t\t\treturn translator.translate('[[notifications:user_posted_to, [[global:guest]], [[global:guest]]]]').then((translated) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 962,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should properly escape and ignore % and \\\\, in arguments', () => {\n\t\t\tconst translator = Translator.create('en-GB');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 983,
		"snippet" : "\t\t\tif (key === 'hex') {\n\t\t\t\treturn num.toString(16);\n\t\t\t}\n\t\t\tif (key === 'octal') {\n\t\t\t\treturn num.toString(8);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 987,
		"snippet" : "\t});\n\n\tit('registerModule be passed the language', (done) => {\n\t\tTranslator.registerModule('something', (lang) => {\n\t\t\tassert.ok(lang);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 997,
		"snippet" : "\t\t\t\t'[[amazing:cool, awesome, great]]'\n\t\t\t);\n\t\t\tdone();\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 999,
		"snippet" : "\t\t\tdone();\n\t\t});\n\t});\n\n\tdescribe('add translation', () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/translator.js"
	},
	{
		"id" : 1008,
		"snippet" : "const fs = require('fs');\nconst SwaggerParser = require('@apidevtools\/swagger-parser');\nconst request = require('request-promise-native');\nconst nconf = require('nconf');\nconst jwt = require('jsonwebtoken');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1017,
		"snippet" : "\t\t},\n\t\tpost: {},\n\t\tput: {},\n\t\tdelete: {\n\t\t\t'\/users\/{uid}\/tokens\/{token}': [\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1050,
		"snippet" : "\t\tsetup = true;\n\t}\n\n\tit('should pass OpenAPI v3 validation', async () => {\n\t\ttry {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1054,
		"snippet" : "\t\t\t\t\tif (!prefix && !dispatch.route.path.startsWith('\/api\/')) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (prefix === nconf.get('relative_path')) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1070,
		"snippet" : "\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst pathParams = (path.match(\/{[\\w\\-_*]+}?\/g) || []).map(match => match.slice(1, -1));\n\t\t\t\t\tconst schemaParams = context[method].parameters.map(param => (param.in === 'path' ? param.name : null)).filter(Boolean);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1075,
		"snippet" : "\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\t\t\tqs[param.name] = param.example;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1079,
		"snippet" : "\t\t\t\t\t\t\tassert(context[method].requestBody.content['application\/json'].schema.properties, failMessage);\n\t\t\t\t\t\t} else if (context[method].requestBody.content.hasOwnProperty('multipart\/form-data')) {\n\t\t\t\t\t\t\tassert(context[method].requestBody.content['multipart\/form-data'], failMessage);\n\t\t\t\t\t\t\tassert(context[method].requestBody.content['multipart\/form-data'].schema, failMessage);\n\t\t\t\t\t\t\tassert(context[method].requestBody.content['multipart\/form-data'].schema.properties, failMessage);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1101,
		"snippet" : "\t}\n\n\tfunction buildBody(schema) {\n\t\treturn Object.keys(schema).reduce((memo, cur) => {\n\t\t\tmemo[cur] = schema[cur].example;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1105,
		"snippet" : "\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tassert.fail(`Syntax error re: allOf, perhaps you allOf'd an array? (path: ${method} ${path}, context: ${context})`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1116,
		"snippet" : "\t\t\t\t\t\t\t} else if (response[prop].length) { \/\/ for now\n\t\t\t\t\t\t\t\tresponse[prop].forEach((item) => {\n\t\t\t\t\t\t\t\t\tassert.strictEqual(typeof item, schema[prop].items.type, `\"${prop}\" should have ${schema[prop].items.type} items, but found ${typeof items} instead (path: ${method} ${path}, context: ${context})`);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/api.js"
	},
	{
		"id" : 1143,
		"snippet" : "\t\tit('should log and return a set of new events in the topic', async () => {\n\t\t\tconst events = await topics.events.log(topic.topicData.tid, {\n\t\t\t\ttype: 'foo',\n\t\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topicEvents.js"
	},
	{
		"id" : 1148,
		"snippet" : "\n\tdescribe('.purge()', () => {\n\t\tlet eventIds;\n\n\t\tbefore(async () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topicEvents.js"
	},
	{
		"id" : 1157,
		"snippet" : "\t\t\t\tconst destContent = fs.readFileSync(uploadPath, 'utf8');\n\n\t\t\t\tassert.strictEqual(srcContent, destContent);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/file.js"
	},
	{
		"id" : 1217,
		"snippet" : "const cookies = request.jar();\n\nconst db = require('.\/mocks\/databasemock');\nconst user = require('..\/src\/user');\nconst groups = require('..\/src\/groups');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1246,
		"snippet" : "\tit('should unban a user', (done) => {\n\t\tconst socketUser = require('..\/src\/socket.io\/user');\n\t\tsocketUser.unbanUsers({ uid: adminUid }, [regularUid], (err) => {\n\t\t\tassert.ifError(err);\n\t\t\tuser.bans.isBanned(regularUid, (err, isBanned) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1264,
		"snippet" : "\t\t\t\thook: 'filter:email.send',\n\t\t\t\tmethod: dummyEmailerHook,\n\t\t\t});\n\t\t});\n\t\tafter(() => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1272,
		"snippet" : "\t\t});\n\t});\n\n\tit('should push unread notifications on reconnect', (done) => {\n\t\tconst socketMeta = require('..\/src\/socket.io\/meta');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1334,
		"snippet" : "\t\t\t\tdb.isSortedSetMembers('events:time', eids, (err, isMembers) => {\n\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tassert(!isMembers.includes(true));\n\t\t\t\t\tdone();\n\t\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1344,
		"snippet" : "\tdescribe('password reset', () => {\n\t\tconst socketUser = require('..\/src\/socket.io\/user');\n\n\t\tit('should not error on valid email', (done) => {\n\t\t\tsocketUser.reset.send({ uid: 0 }, 'regular@test.com', (err) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1345,
		"snippet" : "\t\t\t\tassert.ifError(err);\n\n\t\t\t\tasync.parallel({\n\t\t\t\t\tcount: async.apply(db.sortedSetCount.bind(db), 'reset:issueDate', 0, Date.now()),\n\t\t\t\t\tevent: async.apply(events.getEvents, '', 0, 0),\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1351,
		"snippet" : "\n\t\t\t\t\t\/\/ Event validity\n\t\t\t\t\tassert.strictEqual(data.event.length, 1);\n\t\t\t\t\tconst event = data.event[0];\n\t\t\t\t\tassert.strictEqual(event.type, 'password-reset');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/socket.io.js"
	},
	{
		"id" : 1409,
		"snippet" : "\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tit('should uninstall a plugin', function (done) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/plugins.js"
	},
	{
		"id" : 1425,
		"snippet" : "});\n\nconst urlObject = url.parse(nconf.get('url'));\nconst relativePath = urlObject.pathname !== '\/' ? urlObject.pathname : '';\nnconf.set('relative_path', relativePath);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/mocks\/databasemock.js"
	},
	{
		"id" : 1454,
		"snippet" : "\tawait setupDefaultConfigs(meta);\n\tawait giveDefaultGlobalPrivileges();\n\tawait meta.configs.init();\n\tmeta.config.postDelay = 0;\n\tmeta.config.initialPostDelay = 0;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/mocks\/databasemock.js"
	},
	{
		"id" : 1474,
		"snippet" : "\t\t\t},\n\t\t}, 0);\n\t\tassert(!flag);\n\t\tdone();\n\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/template-helpers.js"
	},
	{
		"id" : 1481,
		"snippet" : "\n\tit('should generate category background', (done) => {\n\t\tconst category = {\n\t\t\tbgColor: '#ff0000',\n\t\t\tcolor: '#00ff00',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/template-helpers.js"
	},
	{
		"id" : 1499,
		"snippet" : "\n\tit('should render user picture as topic image', (done) => {\n\t\tconst topicObj = { thumb: '', user: { uid: 1, username: 'baris', picture: '\/uploads\/2.png' } };\n\t\tconst html = helpers.renderTopicImage(topicObj);\n\t\tassert.equal(html, `<img component=\"user\/picture\" data-uid=\"${topicObj.user.uid}\" src=\"${topicObj.user.picture}\" class=\"user-img\" title=\"${topicObj.user.username}\" \/>`);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/template-helpers.js"
	},
	{
		"id" : 1523,
		"snippet" : "\tit('should detect the language for a guest', (done) => {\n\t\tmeta.configs.set('autoDetectLang', 1, (err) => {\n\t\t\tassert.ifError(err);\n\t\t\trequest(`${nconf.get('url')}\/api\/config`, {\n\t\t\t\theaders: {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/locale-detect.js"
	},
	{
		"id" : 1535,
		"snippet" : "\t\t\tconst hash = await bcrypt.hash('test', salt);\n\t\t\tconst match = await password.compare('test', hash, false);\n\t\t\tassert(match);\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/password.js"
	},
	{
		"id" : 1539,
		"snippet" : "\t\t\tawait password.hash(12, arr.join('a'));\n\t\t\tconst end = Date.now();\n\n\t\t\tassert(end - start < 5000);\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/password.js"
	},
	{
		"id" : 1541,
		"snippet" : "const request = require('request');\nconst fs = require('fs');\nconst path = require('path');\n\nconst db = require('.\/mocks\/databasemock');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1555,
		"snippet" : "\t\trequest({\n\t\t\turl: `${nconf.get('url')}\/api\/config`,\n\t\t\tjson: true,\n\t\t\theaders: {\n\t\t\t\t'user-agent': 'yandex',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1589,
		"snippet" : "\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tassert.equal(res.statusCode, 200);\n\t\t\t\t\tassert.ok(body);\n\t\t\t\t\tassert.ok(body.indexOf('<main id=\"panel\"'));\n\t\t\t\t\tassert.ok(body.includes(message));\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1590,
		"snippet" : "\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1617,
		"snippet" : "\t\t});\n\t});\n\n\tit('should 404 on \/outgoing with javascript: protocol', (done) => {\n\t\trequest(`${nconf.get('url')}\/outgoing?url=javascript:alert(1);`, (err, res, body) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1643,
		"snippet" : "\t});\n\n\tit('should load recent posts rss feed', (done) => {\n\t\trequest(`${nconf.get('url')}\/recentposts.rss`, (err, res, body) => {\n\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1677,
		"snippet" : "\t\trequest(`${nconf.get('url')}\/groups`, (err, res, body) => {\n\t\t\tassert.ifError(err);\n\t\t\tassert.equal(res.statusCode, 200);\n\t\t\tassert(body);\n\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1685,
		"snippet" : "\t\t\tassert(body);\n\t\t\tdone();\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1686,
		"snippet" : "\tit('should 404 when trying to load group members of hidden group', (done) => {\n\t\tconst groups = require('..\/src\/groups');\n\t\tgroups.create({\n\t\t\tname: 'hidden-group',\n\t\t\tdescription: 'Foobar!',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1731,
		"snippet" : "\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(res.statusCode, 200);\n\t\t\t\tassert(body);\n\t\t\t\tassert(Array.isArray(body.topics));\n\t\t\t\tassert.equal(body.topics.length, 0);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1735,
		"snippet" : "\n\n\tdescribe('maintenance mode', () => {\n\t\tbefore((done) => {\n\t\t\tmeta.config.maintenanceMode = 1;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1755,
		"snippet" : "\t\t\t\t\tassert.equal(body, '\/user\/foo\/bookmarks');\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t\tit('api should redirect to \/user\/[userslug]\/edit\/username', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1768,
		"snippet" : "\n\t\tit('should load \/user\/foo\/upvoted', (done) => {\n\t\t\trequest(`${nconf.get('url')}\/api\/user\/foo\/upvoted`, { jar: jar }, (err, res, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(res.statusCode, 200);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1773,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should load \/user\/foo\/watched', (done) => {\n\t\t\trequest(`${nconf.get('url')}\/api\/user\/foo\/watched`, { jar: jar }, (err, res, body) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1786,
		"snippet" : "\n\t\tit('should load \/user\/foo\/uploads', (done) => {\n\t\t\trequest(`${nconf.get('url')}\/api\/user\/foo\/uploads`, { jar: jar }, (err, res, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(res.statusCode, 200);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1794,
		"snippet" : "\t\t\t\tbodyShort: '[[notifications:user_posted_to, test1, test2]]',\n\t\t\t\tbodyLong: 'some post content',\n\t\t\t\tpid: 1,\n\t\t\t\tpath: `\/post\/${1}`,\n\t\t\t\tnid: `new_post:tid:${1}:pid:${1}:uid:${fooUid}`,\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1808,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should return 401 if user does not have view:users privilege', (done) => {\n\t\t\tprivileges.global.rescind(['groups:view:users'], 'guests', (err) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1830,
		"snippet" : "\t\t\tuser.setUserFields(fooUid, { picture: '\/path\/to\/picture', aboutme: 'hi i am a bot' }, (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\trequest(`${nconf.get('url')}\/api\/user\/foo`, { json: true }, (err, res, body) => {\n\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tassert.equal(res.statusCode, 200);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1837,
		"snippet" : "\t\t\t\t\tpidToDelete = postData.pid;\n\t\t\t\t\ttopics.reply({ uid: fooUid, content: '2nd reply', tid: topicData.tid }, next);\n\t\t\t\t},\n\t\t\t\tfunction (postData, next) {\n\t\t\t\t\tposts.delete(pidToDelete, fooUid, next);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1848,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should render edit\/email', (done) => {\n\t\t\trequest(`${nconf.get('url')}\/api\/user\/foo\/edit\/email`, { jar: jar, json: true }, (err, res, body) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1880,
		"snippet" : "\t});\n\n\tdescribe('handle errors', () => {\n\t\tconst plugins = require('..\/src\/plugins');\n\t\tafter((done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1971,
		"snippet" : "\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n\t\tit('should 404 if filter is invalid', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 1989,
		"snippet" : "\t\t\t\thook: 'filter:composer.build',\n\t\t\t\tmethod: hookMethod,\n\t\t\t});\n\n\t\t\trequest(`${nconf.get('url')}\/api\/compose`, { json: true }, (err, res, body) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers.js"
	},
	{
		"id" : 2009,
		"snippet" : "'use strict';\n\n\nconst\tassert = require('assert');\nconst nconf = require('nconf');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database.js"
	},
	{
		"id" : 2010,
		"snippet" : "const db = require('.\/mocks\/databasemock');\n\n\ndescribe('Test database', () => {\n\tit('should work', () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database.js"
	},
	{
		"id" : 2041,
		"snippet" : "\n\t\tit('should fail to create new topic with empty title', (done) => {\n\t\t\ttopics.post({ uid: topic.userId, title: '', content: topic.content, cid: topic.categoryId }, (err) => {\n\t\t\t\tassert.ok(err);\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2062,
		"snippet" : "\t\t});\n\n\t\tit('should handle direct replies', (done) => {\n\t\t\ttopics.reply({ uid: topic.userId, content: 'test reply', tid: newTopic.tid, toPid: newPost.pid }, (err, result) => {\n\t\t\t\tassert.equal(err, null, 'was created with error');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2079,
		"snippet" : "\t\t\t\t}\n\n\t\t\t\tnewTopic = result.topicData;\n\t\t\t\tnewPost = result.postData;\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2107,
		"snippet" : "\t\t\tit('should return 3 posts in reverse', async () => {\n\t\t\t\tconst topicData = await topics.getTopicData(tid);\n\t\t\t\tconst start = 28;\n\t\t\t\tconst data = await topics.getTopicWithPosts(topicData, `tid:${tid}:posts`, topic.userId, start, 30, true);\n\t\t\t\tassert.strictEqual(data.posts.length, 3);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2111,
		"snippet" : "\t\t\t\tdata.posts.forEach((post, index) => {\n\t\t\t\t\tassert.strictEqual(post.index, index);\n\t\t\t\t});\n\t\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2121,
		"snippet" : "\t\t\t\t\t\tnewTopic = result.topicData;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2134,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2155,
		"snippet" : "\t\t\t\t\t\tname: 'move to this category',\n\t\t\t\t\t\tdescription: 'Test category created by testing script',\n\t\t\t\t\t}, next);\n\t\t\t\t},\n\t\t\t\tfunction (category, next) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2209,
		"snippet" : "\t\t\t\t\t\tif (topics[i].tid === parseInt(newTid, 10)) {\n\t\t\t\t\t\t\tassert.equal(false, topics[i].unread, 'ignored topic was marked as unread in recent list');\n\t\t\t\t\t\t\treturn done();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2229,
		"snippet" : "\t\t});\n\n\t\tit('should fail with invalid data', (done) => {\n\t\t\tsocketTopics.bookmark({ uid: topic.userId }, null, (err) => {\n\t\t\t\tassert.equal(err.message, '[[error:invalid-data]]');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2275,
		"snippet" : "\t\t\t\tassert.equal(response.statusCode, 404);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2285,
		"snippet" : "\t\tit('should error with invalid data', (done) => {\n\t\t\tsocketTopics.loadMore({ uid: adminUid }, {}, (err) => {\n\t\t\t\tassert.equal(err.message, '[[error:invalid-data]]');\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2296,
		"snippet" : "\t\t\t\tassert.equal(err.message, '[[error:invalid-data]]');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2299,
		"snippet" : "\tdescribe('suggested topics', () => {\n\t\tlet tid1;\n\t\tlet tid3;\n\t\tbefore((done) => {\n\t\t\tasync.series({\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2344,
		"snippet" : "\t\t\tsocketTopics.markAsRead({ uid: adminUid }, [], (err, markedRead) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert(!markedRead);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2345,
		"snippet" : "\t\t});\n\n\t\tit('should not return topics in category you cant read', (done) => {\n\t\t\tlet privateCid;\n\t\t\tlet privateTid;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2363,
		"snippet" : "\n\t\tit('should not return topic as unread if topic is deleted', async () => {\n\t\t\tconst uid = await User.create({ username: 'regularJoe' });\n\t\t\tconst result = await topics.post({ uid: adminUid, title: 'deleted unread', content: 'not unread', cid: categoryObj.cid });\n\t\t\tawait topics.delete(result.topicData.tid, adminUid);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2434,
		"snippet" : "\t\tit('should create and delete category tags properly', async () => {\n\t\t\tconst category = await categories.create({ name: 'tag category 2' });\n\t\t\tconst { cid } = category;\n\t\t\tconst title = 'test title';\n\t\t\tconst postResult = await topics.post({ uid: adminUid, tags: ['cattag1', 'cattag2', 'cattag3'], title: title, content: 'topic 1 content', cid: cid });\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2450,
		"snippet" : "\t\t\tconst oldValue = meta.config.systemTags;\n\t\t\tmeta.config.systemTags = 'moved,locked';\n\t\t\tconst result = await topics.post({\n\t\t\t\tuid: adminUid,\n\t\t\t\ttags: ['locked'],\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2467,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should return results', (done) => {\n\t\t\tconst plugins = require('..\/src\/plugins');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2492,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should get teaser by tid', (done) => {\n\t\t\ttopics.getTeaser(topic2.topicData.tid, 1, (err, teaser) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2506,
		"snippet" : "\t\t\t\t\tassert.equal(err.message, '[[error:no-privileges]]');\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2509,
		"snippet" : "\t\t\t\t\t\tassert(tags.includes('tag2'));\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2514,
		"snippet" : "\t\t\t\t\ttopics.post({ uid: uid, cid: categoryObj.cid, title: 'topic 1', content: 'topic 1 OP' }, next);\n\t\t\t\t},\n\t\t\t\tfunction (result, next) {\n\t\t\t\t\ttopic1Data = result.topicData;\n\t\t\t\t\ttopics.post({ uid: uid, cid: categoryObj.cid, title: 'topic 2', content: 'topic 2 OP' }, next);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2521,
		"snippet" : "\t\t\tconst [topic1, topic2] = await Promise.all([\n\t\t\t\tgetTopic(topic1Data.tid),\n\t\t\t\tgetTopic(topic2Data.tid),\n\t\t\t]);\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2529,
		"snippet" : "\t\t\t\tgetTopic(topic2Result.topicData.tid),\n\t\t\t]);\n\n\t\t\tassert.equal(topic1.posts.length, 0);\n\t\t\tassert.equal(topic2.posts.length, 4);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2532,
		"snippet" : "\t\t\tconst topic1Result = await topics.post({ uid: uid, cid: categoryObj.cid, title: 'topic 1', content: 'topic 1 OP' });\n\t\t\tconst topic2Result = await topics.post({ uid: uid, cid: categoryObj.cid, title: 'topic 2', content: 'topic 2 OP' });\n\t\t\tawait topics.reply({ uid: uid, content: 'topic 1 reply', tid: topic1Result.topicData.tid });\n\t\t\tawait topics.reply({ uid: uid, content: 'topic 2 reply', tid: topic2Result.topicData.tid });\n\t\t\tconst mergeTid = await socketTopics.merge({ uid: adminUid }, {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topics.js"
	},
	{
		"id" : 2546,
		"snippet" : "\t\t\turl: `${nconf.get('url')}\/api\/config`,\n\t\t\tjson: true,\n\t\t\tjar: jar,\n\t\t}, (err, response, body) => {\n\t\t\tif (err) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2612,
		"snippet" : "\t\t\tassert.equal(body, 'Forbidden');\n\t\t\tdone();\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2618,
		"snippet" : "\t\t\tregisterUser('some@user.com', 'a', 'somepassword', (err, response, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(response.statusCode, 400);\n\t\t\t\tassert.equal(body, '[[error:username-too-short]]');\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2619,
		"snippet" : "\t\t\t});\n\t\t});\n\t});\n\n\tit('should fail to register if username is too long', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2621,
		"snippet" : "\t\t});\n\t});\n\n\tit('should queue user if ip is used before', (done) => {\n\t\tmeta.config.registrationApprovalType = 'admin-approval-ip';\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2637,
		"snippet" : "\t\t\t\t\tuser.bans.unban(bannedUser.uid, (err) => {\n\t\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\t\tconst expiry = Date.now() + 10000;\n\t\t\t\t\t\tuser.bans.ban(bannedUser.uid, expiry, '', (err) => {\n\t\t\t\t\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/authentication.js"
	},
	{
		"id" : 2651,
		"snippet" : "const db = require('..\/mocks\/databasemock');\n\ndescribe('Key methods', () => {\n\tbeforeEach((done) => {\n\t\tdb.set('testKey', 'testValue', done);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2653,
		"snippet" : "\t\t\tassert(arguments.length < 2);\n\t\t\tdone();\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2655,
		"snippet" : "\t\t\tdone();\n\t\t});\n\t});\n\n\tit('should return null if key does not exist', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2662,
		"snippet" : "\t\t});\n\t});\n\n\tdescribe('scan', () => {\n\t\tit('should scan keys for pattern', async () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2669,
		"snippet" : "\t\t\tdb.exists('testKey', (err, exists) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.strictEqual(exists, false);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2672,
		"snippet" : "\t\t\t},\n\t\t], (err) => {\n\t\t\tif (err) {\n\t\t\t\treturn done(err);\n\t\t\t}\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2677,
		"snippet" : "\tit('should delete all sorted set elements', (done) => {\n\t\tasync.parallel([\n\t\t\tfunction (next) {\n\t\t\t\tdb.sortedSetAdd('deletezset', 1, 'value1', next);\n\t\t\t},\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2716,
		"snippet" : "\t\tit('should expire a key using seconds', (done) => {\n\t\t\tdb.expire('testKey', 86400, (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tdb.ttl('testKey', (err, ttl) => {\n\t\t\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/keys.js"
	},
	{
		"id" : 2756,
		"snippet" : "\t\t\t\tasync.apply(db.setAdd, 'set6', 1),\n\t\t\t\tasync.apply(db.setAdd, 'set7', 2),\n\t\t\t], done);\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sets.js"
	},
	{
		"id" : 2760,
		"snippet" : "\n\t\tit('should remove a element from set', (done) => {\n\t\t\tdb.setRemove('testSet6', '2', function (err) {\n\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(arguments.length, 1);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sets.js"
	},
	{
		"id" : 2777,
		"snippet" : "'use strict';\n\n\nconst\tasync = require('async');\nconst assert = require('assert');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/list.js"
	},
	{
		"id" : 2790,
		"snippet" : "\t\tit('should prepend each element to list', async () => {\n\t\t\tawait db.listPrepend('arrayListPrepend', ['a', 'b', 'c']);\n\t\t\tlet values = await db.getListRange('arrayListPrepend', 0, -1);\n\t\t\tassert.deepStrictEqual(values, ['c', 'b', 'a']);\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/list.js"
	},
	{
		"id" : 2834,
		"snippet" : "\t\t\tconst data = await db.getSortedSetScan({\n\t\t\t\tkey: 'scanzset',\n\t\t\t\tmatch: '*bc*',\n\t\t\t\twithScores: true,\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2856,
		"snippet" : "\n\tdescribe('sortedSetsAdd()', () => {\n\t\tit('should add an element to two sorted sets', (done) => {\n\t\t\tdb.sortedSetsAdd(['sorted1', 'sorted2'], 3, 'value3', function (err) {\n\t\t\t\tassert.equal(err, null);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2857,
		"snippet" : "\t\t\t\tassert.equal(arguments.length, 1);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2897,
		"snippet" : "\t\t\t\t{ value: '39997', score: 1039997 },\n\t\t\t\t{ value: '39996', score: 1039996 },\n\t\t\t]);\n\n\t\t\tdata = await db.getSortedSetRevRange(keys, 0, -1);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2902,
		"snippet" : "\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.deepEqual(values, ['value3', 'value2', 'value1']);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2917,
		"snippet" : "\n\tdescribe('getSortedSetRevRangeByScore()', () => {\n\t\tit('should get count elements with score between max min sorted by score highest to lowest', (done) => {\n\t\t\tdb.getSortedSetRevRangeByScore('sortedSetTest1', 0, -1, '+inf', 1.2, function (err, values) {\n\t\t\t\tassert.equal(err, null);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2920,
		"snippet" : "\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.deepEqual(values, [{ value: 'value1', score: 1.1 }, { value: 'value2', score: 1.2 }]);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2930,
		"snippet" : "\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.equal(count, 3);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2947,
		"snippet" : "\t\t\tdb.sortedSetsCardSum('sortedSetTest1', function (err, sum) {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.equal(sum, 3);\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 2999,
		"snippet" : "\t\t\t\tassert.equal(isMember, false);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3025,
		"snippet" : "\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3036,
		"snippet" : "\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tdb.sortedSetRemove(['multiTest1', 'multiTest2'], ['two', 'three', 'four', 'five', 'doesnt exist'], (err) => {\n\t\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\t\tdb.getSortedSetsMembers(['multiTest1', 'multiTest2'], (err, members) => {\n\t\t\t\t\t\t\tassert.ifError(err);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3047,
		"snippet" : "\t\t});\n\n\t\tit('should do a bulk remove', async () => {\n\t\t\tawait db.sortedSetAddBulk([\n\t\t\t\t['bulkRemove1', 1, 'value1'],\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3050,
		"snippet" : "\t\t});\n\t});\n\n\tdescribe('sortedSetsRemove()', () => {\n\t\tbefore((done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3103,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should return an array with an inclusive range by default', (done) => {\n\t\t\tdb.getSortedSetRangeByLex('sortedSetLex', 'a', 'd', (err, data) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/sorted.js"
	},
	{
		"id" : 3141,
		"snippet" : "\t\t\tdb.setObject('testObject1', { foo: 'baris', bar: 99 }, function (err) {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert(arguments.length < 2);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3143,
		"snippet" : "\t\t\tconst result = await db.getObjects(['multiObject1', 'multiObject2']);\n\t\t\tassert.deepStrictEqual(result[0], data);\n\t\t\tassert.deepStrictEqual(result[1], data);\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3165,
		"snippet" : "\t\t\t\tassert.equal(!!data, false);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3183,
		"snippet" : "\t\tit('should return an object with falsy values', (done) => {\n\t\t\tdb.getObjectFields('doesnotexist', ['field1', 'field2'], function (err, object) {\n\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.equal(typeof object, 'object');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3191,
		"snippet" : "\n\t\tit('should return an array of objects with correct values', (done) => {\n\t\t\tdb.getObjectsFields(['testObject8', 'testObject9', 'doesnotexist'], ['name', 'age'], function (err, objects) {\n\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(arguments.length, 2);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3212,
		"snippet" : "\t\t\tdb.isObjectFields('doesnotexist', ['field1', 'field2'], function (err, values) {\n\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(arguments.length, 2);\n\t\t\t\tassert.deepEqual(values, [false, false]);\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3230,
		"snippet" : "\t\tit('should not error if field is null', (done) => {\n\t\t\tdb.deleteObjectField('someKey', null, (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3231,
		"snippet" : "\t\t});\n\t});\n\n\tdescribe('incrObjectField()', () => {\n\t\tbefore((done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/database\/hash.js"
	},
	{
		"id" : 3253,
		"snippet" : "const db = require('.\/mocks\/databasemock');\nconst image = require('..\/src\/image');\nconst file = require('..\/src\/file');\n\ndescribe('image', () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/image.js"
	},
	{
		"id" : 3258,
		"snippet" : "\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(bitmap.width, 50);\n\t\t\t\tassert.equal(bitmap.height, 40);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/image.js"
	},
	{
		"id" : 3280,
		"snippet" : "\t});\n};\n\n\nhelpers.logoutUser = function (jar, callback) {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/helpers\/index.js"
	},
	{
		"id" : 3283,
		"snippet" : "\t\t\tform: {},\n\t\t\tjson: true,\n\t\t\tjar: jar,\n\t\t\theaders: {\n\t\t\t\t'x-csrf-token': body.csrf_token,\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/helpers\/index.js"
	},
	{
		"id" : 3286,
		"snippet" : "\tcookies = cookies.filter(c => \/express.sid=[^;]+;\/.test(c));\n\tconst cookie = cookies[0];\n\tconst socket = io(nconf.get('base_url'), {\n\t\tpath: `${nconf.get('relative_path')}\/socket.io`,\n\t\textraHeaders: {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/helpers\/index.js"
	},
	{
		"id" : 3304,
		"snippet" : "\t\t\tcbCalled = true;\n\t\t}\n\t}\n};\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/helpers\/index.js"
	},
	{
		"id" : 3346,
		"snippet" : "\t});\n\n\tit('should search with tags filter', (done) => {\n\t\tsearch.search({\n\t\t\tquery: 'mongodb',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/search.js"
	},
	{
		"id" : 3354,
		"snippet" : "\t\t\t\t\tuid: gingerUid,\n\t\t\t\t\tcid: cid3,\n\t\t\t\t\ttitle: 'child category topic',\n\t\t\t\t\tcontent: 'avocado cucumber carrot armadillo',\n\t\t\t\t}, next);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/search.js"
	},
	{
		"id" : 3390,
		"snippet" : "\t\t\tconst exists = await db.isSortedSetMember(`topic:2:thumbs`, relativeThumbPaths[0]);\n\t\t\tassert(exists);\n\t\t});\n\n\t\tit('should also work with UUIDs', async () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topicThumbs.js"
	},
	{
		"id" : 3400,
		"snippet" : "\t\t\t\tpath: relativeThumbPaths[0],\n\t\t\t\tscore: 0,\n\t\t\t});\n\n\t\t\tconst score = await db.sortedSetScore(`topic:2:thumbs`, relativeThumbPaths[0]);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topicThumbs.js"
	},
	{
		"id" : 3429,
		"snippet" : "\t\t\thelpers.uploadFile(`${nconf.get('url')}\/api\/v3\/topics\/abracadabra\/thumbs`, path.join(__dirname, '.\/files\/test.png'), {}, adminJar, adminCSRF, (err, res, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.strictEqual(res.statusCode, 404);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/topicThumbs.js"
	},
	{
		"id" : 3451,
		"snippet" : "\t\t});\n\t});\n\tafter(() => {\n\t\tplugins.hooks.unregister('emailer-test', 'filter:email.send');\n\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3480,
		"snippet" : "\t\t\t\tassert.equal(err, null);\n\t\t\t\tassert.equal(isModerator, false);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3484,
		"snippet" : "\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3486,
		"snippet" : "\t\tit('should retrieve all users with moderator bit in category privilege', (done) => {\n\t\t\tUser.getModeratorUids((err, uids) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.strictEqual(1, uids.length);\n\t\t\t\tassert.strictEqual(1, parseInt(uids[0], 10));\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3504,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3589,
		"snippet" : "\t\t});\n\n\t\tit('should return an icon text and valid background if username and picture is explicitly requested', async () => {\n\t\t\tconst payload = await User.getUserFields(testUid, ['username', 'picture']);\n\t\t\tconst validBackgrounds = await User.getIconBackgrounds(testUid);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3612,
		"snippet" : "\t\t\t});\n\t\t});\n\n\t\tit('should update a user\\'s profile', (done) => {\n\t\t\tUser.create({ username: 'justforupdate', email: 'just@for.updated', password: '123456' }, (err, uid) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3695,
		"snippet" : "\t\t\t\tassert(body);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3728,
		"snippet" : "\t\t\t\/\/ This will not restored\n\t\t\tassert.strictEqual(membership.get('Global Moderators'), false);\n\t\t});\n\n\t\tit('should restore system group memberships after an unban (for a verified user)', async () => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3746,
		"snippet" : "\t\t\t\t\t\tnext();\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t], done);\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3800,
		"snippet" : "\t\tit('should not error', (done) => {\n\t\t\tsocketUser.reset.send({ uid: 0 }, 'doestnot@exist.com', (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tdone();\n\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3817,
		"snippet" : "\t\t\t\t\tpostsPerPage: '5',\n\t\t\t\t},\n\t\t\t};\n\t\t\tsocketUser.saveSettings({ uid: testUid }, data, (err) => {\n\t\t\t\tassert.equal(err.message, '[[error:invalid-language]]');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3819,
		"snippet" : "\t\t\tlet adminUid;\n\t\t\tasync.waterfall([\n\t\t\t\tfunction (next) {\n\t\t\t\t\tUser.create({ username: 'noteadmin' }, next);\n\t\t\t\t},\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3822,
		"snippet" : "\t\t\t\tfunction (next) {\n\t\t\t\t\tsocketUser.setModerationNote({ uid: adminUid }, { uid: testUid, note: '<svg\/onload=alert(document.location);\/\/' }, next);\n\t\t\t\t},\n\t\t\t\tfunction (next) {\n\t\t\t\t\tUser.getModerationNotes(testUid, 0, -1, next);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3841,
		"snippet" : "\t\tit('should accept user registration', (done) => {\n\t\t\thelpers.registerUser({\n\t\t\t\tusername: 'acceptme',\n\t\t\t\tpassword: '123456',\n\t\t\t\t'password-confirm': '123456',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3848,
		"snippet" : "\t\t\t\t\tassert.equal(data[0], 'invalidname');\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3966,
		"snippet" : "\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3980,
		"snippet" : "\t\t\tit('should not process invalid sets', (done) => {\n\t\t\t\tUser.blocks.filter(1, [{ foo: 'foo' }, { foo: 'bar' }, { foo: 'baz' }], (err, filtered) => {\n\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tassert.strictEqual(Array.isArray(filtered), true);\n\t\t\t\t\tassert.strictEqual(filtered.length, 3);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3986,
		"snippet" : "\n\tdescribe('status\/online', () => {\n\t\tit('should return offline if user is guest', (done) => {\n\t\t\tconst status = User.getStatus({ uid: 0 });\n\t\t\tassert.strictEqual(status, 'offline');\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3990,
		"snippet" : "\t\t\t\tassert.ifError(err);\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 3996,
		"snippet" : "\t\t\tdone();\n\t\t});\n\t});\n\n\tit('should allow user to login even if password is weak', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/user.js"
	},
	{
		"id" : 4078,
		"snippet" : "\n\tdescribe('session TTL', () => {\n\t\tit('should return 14 days in seconds', (done) => {\n\t\t\tassert(meta.getSessionTTLSeconds(), 1209600);\n\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/meta.js"
	},
	{
		"id" : 4097,
		"snippet" : "\tdescribe('Access-Control-Allow-Origin', () => {\n\t\tit('Access-Control-Allow-Origin header should be empty', (done) => {\n\t\t\tconst jar = request.jar();\n\t\t\trequest.get(`${nconf.get('url')}\/api\/search?term=bug`, {\n\t\t\t\tform: {},\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/meta.js"
	},
	{
		"id" : 4101,
		"snippet" : "\t\t\t\t},\n\t\t\t\tjson: true,\n\t\t\t\tjar: jar,\n\t\t\t\theaders: {\n\t\t\t\t\torigin: 'mydomain.com',\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/meta.js"
	},
	{
		"id" : 4128,
		"snippet" : "\t\t});\n\t});\n\n\n\tit('should 404', (done) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/feeds.js"
	},
	{
		"id" : 4138,
		"snippet" : "\t\t\trequest(`${nconf.get('url')}\/topic\/${tid}.rss`, (err, res, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(res.statusCode, 200);\n\t\t\t\tassert(body);\n\t\t\t\tassert(body.includes('Login to your account'));\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/feeds.js"
	},
	{
		"id" : 4208,
		"snippet" : "\t\t\t\t\ttag: 'nodebb',\n\t\t\t\t},\n\t\t\t}, (err, data) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert(Array.isArray(data.topics));\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4230,
		"snippet" : "\n\t\tit('should error if you try to set parent as self', (done) => {\n\t\t\tconst updateData = {};\n\t\t\tupdateData[cid] = {\n\t\t\t\tparentCid: cid,\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4232,
		"snippet" : "\t\t});\n\n\t\tit('should error if you try to set child as parent', (done) => {\n\t\t\tlet child1Cid;\n\t\t\tlet parentCid;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4240,
		"snippet" : "\t\t\t\t\tassert.equal(data.name, updateData[cid].name);\n\t\t\t\t\tassert.equal(data.description, updateData[cid].description);\n\t\t\t\t\tassert.equal(data.parentCid, updateData[cid].parentCid);\n\t\t\t\t\tassert.equal(data.order, updateData[cid].order);\n\t\t\t\t\tassert.equal(data.icon, updateData[cid].icon);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4258,
		"snippet" : "\t\t\t\t\tchild1Cid = category.cid;\n\t\t\t\t\tCategories.create({ name: 'child2', parentCid: child1Cid }, next);\n\t\t\t\t},\n\t\t\t\tfunction (category, next) {\n\t\t\t\t\tchild2Cid = category.cid;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4294,
		"snippet" : "\t\t\t\tassert.ifError(err);\n\t\t\t\tdb.getSortedSetRange(`cid:${cid}:tag:whitelist`, 0, -1, (err, tagWhitelist) => {\n\t\t\t\t\tassert.ifError(err);\n\t\t\t\t\tassert.deepEqual(['nodebb', 'jquery', 'javascript'], tagWhitelist);\n\t\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4300,
		"snippet" : "\t\t\t\tcontent: 'The content of test topic',\n\t\t\t\ttags: ['nodebb', 'jquery', 'notallowed'],\n\t\t\t}, (err, data) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(data.topicData.tags.length, 2);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4322,
		"snippet" : "\t\t\t\t\t'groups:invite': false,\n\t\t\t\t\t'groups:chat': true,\n\t\t\t\t\t'groups:search:content': true,\n\t\t\t\t\t'groups:search:users': true,\n\t\t\t\t\t'groups:search:tags': true,\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4330,
		"snippet" : "\t\t\t\t\tassert.strictEqual(uids.length, 2);\n\t\t\t\t\tassert(uids[0].includes('1'));\n\t\t\t\t\tassert.strictEqual(uids[1].length, 0);\n\t\t\t\t\tdone();\n\t\t\t\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/categories.js"
	},
	{
		"id" : 4364,
		"snippet" : "describe('Admin Controllers', () => {\n\tlet tid;\n\tlet cid;\n\tlet pid;\n\tlet regularPid;\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers-admin.js"
	},
	{
		"id" : 4383,
		"snippet" : "\tit('should load global privileges page', (done) => {\n\t\trequest(`${nconf.get('url')}\/admin\/manage\/privileges`, { jar: jar }, (err, res, body) => {\n\t\t\tassert.ifError(err);\n\t\t\tassert.equal(res.statusCode, 200);\n\t\t\tassert(body);\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers-admin.js"
	},
	{
		"id" : 4408,
		"snippet" : "\t\t});\n\t});\n\n\tit('should 404 if users is not privileged', (done) => {\n\t\trequest(`${nconf.get('url')}\/api\/registration-queue`, { json: true }, (err, res, body) => {\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers-admin.js"
	},
	{
		"id" : 4432,
		"snippet" : "\t\t\t\tassert.strictEqual(body, '');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers-admin.js"
	},
	{
		"id" : 4434,
		"snippet" : "\t\t\trequest(`${nconf.get('url')}\/api\/admin\/advanced\/logs`, { jar: jar, json: true }, (err, res, body) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tassert.equal(res.statusCode, 200);\n\t\t\t\tassert(body);\n\t\t\t\tdone();\n",
		"language" : "JavaScript",
		"repo_file_name" : "NodeBB\/NodeBB\/test\/controllers-admin.js"
	}
]}
