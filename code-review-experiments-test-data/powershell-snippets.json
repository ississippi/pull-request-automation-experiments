{
"snippets": [
	{
		"id" : 2567155,
		"snippet" : "# Jenkins CI scripts for Windows to Windows CI (Powershell Version)\n# By John Howard (@jhowardmsft) January 2016 - bash version; July 2016 Ported to PowerShell\n\n$ErrorActionPreference = 'Stop'\n$StartTime=Get-Date\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567174,
		"snippet" : "#                             if no set, defaults to latest\n#\n#    LCOW_BASIC_MODE          if defined, does very basic LCOW verification. Ultimately we \n#                             want to run the entire CI suite from docker, but that's a way off.\n#                            \n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567175,
		"snippet" : "#    LCOW_MODE                if defined, runs the entire CI suite\n#                            \n# -------------------------------------------------------------------------------------------\n#\n# Jenkins Integration. Add a Windows Powershell build step as follows:\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567237,
		"snippet" : "    Write-Host\n    $ErrorActionPreference = \"SilentlyContinue\"\n    docker info\n    $ErrorActionPreference = \"Stop\"\n    if (-not($LastExitCode -eq 0)) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567278,
		"snippet" : "        }\n    }\n\n    # Start the daemon under test, ensuring everything is redirected to folders under $TEMP.\n    # Important - we launch the -$COMMITHASH version so that we can kill it without\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567289,
		"snippet" : "    # Provide the docker version of the daemon under test for debugging purposes.\n    Write-Host -ForegroundColor Green \"INFO: Docker version of the daemon under test\"\n    Write-Host \n    $ErrorActionPreference = \"SilentlyContinue\"\n    & \"$env:TEMP\\binary\\docker-$COMMITHASH\" \"-H=$($DASHH_CUT)\" version\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567294,
		"snippet" : "    $ErrorActionPreference = \"SilentlyContinue\"\n    & \"$env:TEMP\\binary\\docker-$COMMITHASH\" \"-H=$($DASHH_CUT)\" images\n    $ErrorActionPreference = \"Stop\"\n    if ($LastExitCode -ne 0) {\n        Throw \"ERROR: The daemon under test does not appear to be running.\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/ci\/windows.ps1"
	},
	{
		"id" : 2567514,
		"snippet" : "$pushed=$False  # To restore the directory if we have temporarily pushed to one.\nSet-Variable GOTESTSUM_LOCATION -option Constant -value \"$env:GOPATH\/bin\/\"\n\n# Utility function to get the commit ID of the repository\nFunction Get-GitCommit() {\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567530,
		"snippet" : "    if ($ForceBuildAll)             { $allParm=\" -a\" }\n    if ($NoOpt)                     { $optParm=\" -gcflags \"+\"\"\"\"+\"-N -l\"+\"\"\"\" }\n    if ($additionalBuildTags -ne \"\") { $buildTags += $(\" \" + $additionalBuildTags) }\n\n    # Do the go build in the appropriate directory\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567540,
		"snippet" : "    $commits | ForEach-Object{\n        # Skip commits with no content such as merge commits etc\n        if ($(git log -1 --format=format: --name-status $_).Length -gt 0) {\n            # Ignore exit code on next call - always process regardless\n            $commitMessage = Invoke-Expression \"git log -1 --format=format:%B --name-status $_\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567561,
		"snippet" : "    $p = New-Object System.Diagnostics.Process\n    $p.StartInfo = $pinfo\n    $p.Start() | Out-Null\n    $p.WaitForExit()\n    if ($p.ExitCode -ne 0) { Throw \"Unit tests failed\" }\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567562,
		"snippet" : "}\n\n# Run the integration tests\nFunction Run-IntegrationTests() {\n    $escRoot = [Regex]::Escape($root)\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567568,
		"snippet" : "        $pinfo.Arguments = \"--format=standard-verbose --jsonfile=$jsonFilePath --junitfile=$xmlFilePath -- -test.timeout=60m $env:INTEGRATION_TESTFLAGS\"\n        $p = New-Object System.Diagnostics.Process\n        $p.StartInfo = $pinfo\n        $p.Start() | Out-Null\n        $p.WaitForExit()\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567571,
		"snippet" : "    Push-Location $root\n\n    # Ensure the bundles directory exists\n    $bundlesDir = $root + \"\\bundles\"\n    Set-Variable bundlesDir -option ReadOnly\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567579,
		"snippet" : "    # Verify GOPATH is set\n    if ($env:GOPATH.Length -eq 0) { Throw \"Missing GOPATH environment variable. See https:\/\/golang.org\/doc\/code.html#GOPATH\" }\n\n    # Run autogen if building binaries or running unit tests.\n    if ($Client -or $Daemon -or $TestUnit) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make.ps1"
	},
	{
		"id" : 2567751,
		"snippet" : "    [Parameter(Mandatory=$true)][string]$CommitString,\n    [Parameter(Mandatory=$true)][string]$DockerVersion,\n    [Parameter(Mandatory=$false)][string]$Platform,\n    [Parameter(Mandatory=$false)][string]$Product,\n    [Parameter(Mandatory=$false)][string]$DefaultProductLicense\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make\/.go-autogen.ps1"
	},
	{
		"id" : 2567762,
		"snippet" : "    if ($LASTEXITCODE -ne 0) { Throw \"Failed to compile event message resources\" }\n\n    # If you really want to understand this madness below, search the Internet for powershell variables after verbatim arguments... Needed to get double-quotes passed through to the compiler options.\n    # Generate the .syso files containing all the resources and manifest needed to compile the final docker binaries. Both 32 and 64-bit clients.\n    $env:_ag_dockerVersion=$DockerVersion\n",
		"language" : "PowerShell",
		"repo_file_name" : "moby\/moby\/hack\/make\/.go-autogen.ps1"
	},
	{
		"id" : 3613957,
		"snippet" : "\n    begin {\n        Write-Host -ForegroundColor DarkGreen \"  download-module.DownloadFileWithProgress  $url\"\n        $client = New-Object System.Net.WebClient\n        $Global:downloadComplete = $false\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/pkg\/windows\/modules\/download-module.psm1"
	},
	{
		"id" : 3613985,
		"snippet" : "\n        Write-Verbose \"$($MyInvocation.MyCommand.Name):: Finished Loading Settings\"\n        Return $ini\n    }\n    End\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/pkg\/windows\/modules\/get-settings.psm1"
	},
	{
		"id" : 3613996,
		"snippet" : "Write-Output \"               eg: ${script_name} -NoPipDependencies\"\nWrite-Output \"\"\nWrite-Output \"=================================================================\"\nWrite-Output \"\"\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/pkg\/windows\/build_env.ps1"
	},
	{
		"id" : 3614030,
		"snippet" : "    # Copy dlls to plugins directory (both ANSI and Unicode)\n    Write-Output \" - Copying dlls to plugins directory . . .\"\n    Move-Item \"$( $ini['Settings']['DownloadDir'] )\\nsisenvar\\Plugins\\x86-ansi\\EnVar.dll\" \"$( $ini[$bitPaths]['NSISPluginsDirA'] )\\EnVar.dll\" -Force\n    Move-Item \"$( $ini['Settings']['DownloadDir'] )\\nsisenvar\\Plugins\\x86-unicode\\EnVar.dll\" \"$( $ini[$bitPaths]['NSISPluginsDirU'] )\\EnVar.dll\" -Force\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/pkg\/windows\/build_env.ps1"
	},
	{
		"id" : 3614057,
		"snippet" : "    $file = \"$($ini[$bitDLLs][$key])\"\n    $url  = \"$($ini['Settings']['SaltRepo'])\/$bitFolder\/$file\"\n    $file = \"$($ini['Settings']['DownloadDir'])\\$bitFolder\\$file\"\n    DownloadFileWithProgress $url $file\n    Copy-Item $file  -destination $($ini['Settings']['Python3Dir'])\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/pkg\/windows\/build_env.ps1"
	},
	{
		"id" : 3620621,
		"snippet" : "\n$SourceStore.Close()\n$DestStore.Close()\n\nwinrm create winrm\/config\/listener?Address=*+Transport=HTTPS `@`{CertificateThumbprint=`\"($cert.Thumbprint)`\"`}\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/tests\/integration\/files\/windows-firewall.ps1"
	},
	{
		"id" : 3620659,
		"snippet" : "Configuration HelloWorld {\n\n    # Import the module that contains the File resource.\n    Import-DscResource -ModuleName PsDesiredStateConfiguration\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "saltstack\/salt\/tests\/integration\/files\/file\/base\/HelloWorld.ps1"
	},
	{
		"id" : 4103908,
		"snippet" : "if ($env:APPVEYOR_PULL_REQUEST_NUMBER -eq $null)\n{\n    Invoke-WebRequest \"$env:APIKeys\" -OutFile \"ShareX.UploadersLib\\APIKeys\\APIKeysLocal.cs\"\n}\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ShareX\/ShareX\/AppVeyor\/before_build.ps1"
	},
	{
		"id" : 6936821,
		"snippet" : "Write-Output \"`\" Required:\"\nWrite-Output \"set runtimepath+=$InstallDir\"\nWrite-Output \"\"\nWrite-Output \"`\" Required:\"\nWrite-Output \"if dein#load_state('$PluginDir')\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/dein.vim\/bin\/installer.ps1"
	},
	{
		"id" : 7001465,
		"snippet" : "### Process args =======================================================\n\nfunction de64_args($argv) {\n    $argv | % {\n        $b64 = $_ -replace '-','=' -replace '_','\/' -replace '\\.','+'\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/editorconfig-vim\/tests\/core\/ecvimlib.ps1"
	},
	{
		"id" : 7001468,
		"snippet" : "    }\n}\n\n# Escape a string for Vim\nfunction global:vesc($str) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/editorconfig-vim\/tests\/core\/ecvimlib.ps1"
	},
	{
		"id" : 7001473,
		"snippet" : "\n    # write-host ($vims | format-table | out-string)    # DEBUG\n    # write-host ($vims | get-member | out-string)\n    if($vims.count -gt 0) {\n        if($debug) { echo \"Using found Vim $($vims[0].FullName)\" | D }\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/editorconfig-vim\/tests\/core\/ecvimlib.ps1"
	},
	{
		"id" : 7001475,
		"snippet" : "\n### Runner =============================================================\n\n# Run a process with the given arguments.\nfunction global:run_process\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/editorconfig-vim\/tests\/core\/ecvimlib.ps1"
	},
	{
		"id" : 7001477,
		"snippet" : "        [string]$stderr,        # Redirect stderr to this file\n        [string[]]$argv         # Arguments to $run\n    )\n    $si = new-object Diagnostics.ProcessStartInfo\n    if($extrapath) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "SpaceVim\/SpaceVim\/bundle\/editorconfig-vim\/tests\/core\/ecvimlib.ps1"
	},
	{
		"id" : 9130015,
		"snippet" : "      Write-Warning \"$suite is excluded from running as Google test suite\"\n      continue\n    }\n\n    if($EnableJE) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130020,
		"snippet" : "# This will contain all test executables to run\n\n# Hash table that contains all non suite\n# Test executable to run\n$TestExes = [ordered]@{}\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130037,
		"snippet" : "    $e = $e -replace '.exe$', ''\n    $bare_name = $e -replace '_je$', ''\n\n    if($ExcludeExesSet.Contains($bare_name)) {\n      Write-Warning \"Test $e is excluded\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130043,
		"snippet" : "\n# Hash that contains tests to rerun if any failed\n# Those tests will be rerun sequentially\n# $Rerun = [ordered]@{}\n# Test limiting factor here\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130049,
		"snippet" : "            $Cases = @{}\n\n            if($Suites.Count -gt 0) {\n              # Will the first one\n              ForEach($e in $Suites.Keys) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130050,
		"snippet" : "                $exe_name = $e\n                $Cases = $Suites[$e]\n                break\n              }\n              [string]$test_case = \"\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9130067,
		"snippet" : "                $script:success = $false;\n                Write-Warning $message\n                $log_content | Write-Warning\n            } else {\n                Write-Host $message\n",
		"language" : "PowerShell",
		"repo_file_name" : "facebook\/rocksdb\/build_tools\/run_ci_db_test.ps1"
	},
	{
		"id" : 9869310,
		"snippet" : "\n# redefine Write-Host to dump to output instead of failing\n# lots of scripts still use it\n$ps.AddScript('Function Write-Host($msg) { Write-Output -InputObject $msg }').AddStatement() > $null\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/module_wrapper.ps1"
	},
	{
		"id" : 9869326,
		"snippet" : "    } else {\n        $error_params.Message += \": $($reason.ToString())\"\n    }\n\n    Write-AnsibleError @error_params\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/module_wrapper.ps1"
	},
	{
		"id" : 9869327,
		"snippet" : "    $host.SetShouldExit(1)\n    return\n}\n\nWrite-AnsibleLog \"INFO - module exec ended $ModuleName\" \"module_wrapper\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/module_wrapper.ps1"
	},
	{
		"id" : 9869356,
		"snippet" : "    $script:wrapper_functions = {\n        Function Write-AnsibleError {\n            <#\n            .SYNOPSIS\n            Writes an error message to a JSON string in the format that Ansible\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/exec_wrapper.ps1"
	},
	{
		"id" : 9869369,
		"snippet" : "} process {\n    $json_raw += [String]$input\n} end {\n    Write-AnsibleLog \"INFO - starting exec_wrapper\" \"exec_wrapper\"\n    if (-not $json_raw) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/exec_wrapper.ps1"
	},
	{
		"id" : 9869470,
		"snippet" : "} catch {\n    # failed to invoke the PowerShell module, capture the exception and\n    # output a pretty error for Ansible to parse\n    $result = @{\n        msg = \"Failed to invoke PowerShell module: $($_.Exception.Message)\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/module_powershell_wrapper.ps1"
	},
	{
		"id" : 9869481,
		"snippet" : "$ps.Runspace = $rs\n\n# these functions are set in exec_wrapper\nWrite-AnsibleLog \"INFO - adding global functions to PowerShell pipeline script\" \"async_watchdog\"\n$ps.AddScript($script:common_functions).AddStatement() > $null\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/async_watchdog.ps1"
	},
	{
		"id" : 9869519,
		"snippet" : "        $util_path = Join-Path -Path $temp_path -ChildPath \"$($util_name).psm1\"\n\n        Write-AnsibleLog \"INFO - Outputting module_util $util_name to temp file '$util_path'\" \"coverage_wrapper\"\n        Set-Content -LiteralPath $util_path -Value $util_code -Encoding $file_encoding\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/coverage_wrapper.ps1"
	},
	{
		"id" : 9869544,
		"snippet" : "# breakaway flag won't work for psrp as the psrp process does not have breakaway\n# rights. Unfortunately we can't read\/write to the spawned process as we can't\n# inherit the handles. We use a locked down named pipe to send the exec_wrapper\n# payload. Anonymous pipes won't work as the spawned process will not be a child\n# of the current one and will not be able to inherit the handles\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/executor\/powershell\/async_wrapper.ps1"
	},
	{
		"id" : 9889032,
		"snippet" : "    A hashtable or dictionary of header values to set on the request. This is only valid for a HTTP URI.\n\n    .PARAMETER HttpAgent\n    A string to set for the 'User-Agent' header. This is only valid for a HTTP URI.\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.WebRequest.psm1"
	},
	{
		"id" : 9889062,
		"snippet" : "    if ($Module) {\n        foreach ($param in $PSCmdlet.MyInvocation.MyCommand.Parameters.GetEnumerator()) {\n            if ($PSBoundParameters.ContainsKey($param.Key)) {\n                # Was set explicitly we want to use that value\n                continue\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.WebRequest.psm1"
	},
	{
		"id" : 9889075,
		"snippet" : "            } catch [System.Security.Cryptography.CryptographicException] {\n                Write-Error -Message \"Failed to read client certificate at '$ClientCert'\" -Exception $_.Exception -Category SecurityError\n                return\n            }\n        }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.WebRequest.psm1"
	},
	{
		"id" : 9889118,
		"snippet" : "            &$Script -Response $web_response -Stream $response_stream\n        } finally {\n            $response_stream.Dispose()\n        }\n    } finally {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.WebRequest.psm1"
	},
	{
		"id" : 9889162,
		"snippet" : "        private const UInt32 IO_REPARSE_TAG_SYMLINK = 0xA000000C;\n\n        private const UInt32 SYMLINK_FLAG_RELATIVE = 0x00000001;\n\n        private const Int64 INVALID_HANDLE_VALUE = -1;\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.LinkUtil.psm1"
	},
	{
		"id" : 9889178,
		"snippet" : "            UInt32 dwFlags);\n\n        [DllImport(\"kernel32.dll\", SetLastError = true, CharSet = CharSet.Auto)]\n        private static extern bool CreateHardLink(\n            string lpFileName,\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.LinkUtil.psm1"
	},
	{
		"id" : 9889206,
		"snippet" : "            bool isRelative = false;\n            int pathOffset = 0;\n            LinkType linkType;\n            if (buffer.ReparseTag == IO_REPARSE_TAG_SYMLINK)\n            {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.LinkUtil.psm1"
	},
	{
		"id" : 9889227,
		"snippet" : "        if ($module_params.Value.ContainsKey(\"_ansible_remote_tmp\") ) {\n            $remote_tmp = $module_params.Value[\"_ansible_remote_tmp\"]\n            $remote_tmp = [System.Environment]::ExpandEnvironmentVariables($remote_tmp)\n        }\n    }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.LinkUtil.psm1"
	},
	{
		"id" : 9889257,
		"snippet" : "        # If we weren't given 2 args, and the only arg was a string,\n        # create a new Hashtable and use the arg as the failure message\n        $message = $obj\n        $obj = @{ }\n    } else {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889258,
		"snippet" : "        # If the first argument is undefined or a different type,\n        # make it a Hashtable\n        $obj = @{ }\n    }\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889266,
		"snippet" : "    not already set up. This is a convenience for the module developer\n    so they do not have to check for the attribute prior to adding.\n#>\n    if (-not $obj.ContainsKey(\"deprecations\")) {\n        $obj.deprecations = @()\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889268,
		"snippet" : "        msg = $message\n        version = $version\n    }\n}\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889272,
		"snippet" : "{\n<#\n    .SYNOPSIS\n    Helper function to get an \"attribute\" from a psobject instance in PowerShell.\n    This is a convenience to make getting Members from an object easier and\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889278,
		"snippet" : "        }\n        $name = $found\n\n        if ($ValidateSet) {\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.Legacy.psm1"
	},
	{
		"id" : 9889327,
		"snippet" : "\n        # we need to close the special arg with a \"\n        $new_argument += '\"'\n        return $new_argument\n    }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.ArgvParser.psm1"
	},
	{
		"id" : 9889328,
		"snippet" : "}\n\nFunction Argv-ToString($arguments, $force_quote=$false) {\n    # Takes in a list of un escaped arguments and convert it to a single string\n    # that can be used when starting a new process. It will escape the\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.ArgvParser.psm1"
	},
	{
		"id" : 9889351,
		"snippet" : "    [CmdletBinding()]\n    Param(\n        [Parameter(Mandatory=$true)][string]$Path\n    )\n    # Replacement for Get-Item\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.FileUtil.psm1"
	},
	{
		"id" : 9889385,
		"snippet" : "                    continue\n                }\n\n                $parameter_type = $match.Groups[\"Parameter\"].Value\n                $assembly_path = $match.Groups[\"Name\"].Value\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.AddType.psm1"
	},
	{
		"id" : 9889407,
		"snippet" : "            $temp_path = $TempPath\n            $include_debug = $IncludeDebugInfo.IsPresent\n        }\n        $compiler_options = [System.Collections.ArrayList]@(\"\/optimize\")\n        if ($defined_symbols.Count -gt 0) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.AddType.psm1"
	},
	{
		"id" : 9889425,
		"snippet" : "        foreach ($assembly_type in $compiled_assembly.GetTypes()) {\n            if ($assembly_type.Name -eq $type_name) {\n                $type_accelerator::Add($accelerator.Name, $assembly_type)\n                $found = $true\n                break\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.AddType.psm1"
	},
	{
		"id" : 9889428,
		"snippet" : "# Copyright (c) 2018 Ansible Project\n# Simplified BSD License (see licenses\/simplified_bsd.txt or https:\/\/opensource.org\/licenses\/BSD-2-Clause)\n\n#AnsibleRequires -CSharpUtil Ansible.Privilege\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.PrivilegeUtil.psm1"
	},
	{
		"id" : 9889438,
		"snippet" : "        return $status.HasFlag([Ansible.Privilege.PrivilegeAttributes]::Enabled)\n    } else {\n        return $null\n    }\n}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.PrivilegeUtil.psm1"
	},
	{
		"id" : 9889469,
		"snippet" : "    $command_result = [Ansible.Process.ProcessUtil]::CreateProcess($executable, $command, $working_directory, $environment, $stdin, $output_encoding_override)\n\n    return ,@{\n        executable = $executable\n        stdout = $command_result.StandardOut\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/lib\/ansible\/module_utils\/powershell\/Ansible.ModuleUtils.CommandUtil.psm1"
	},
	{
		"id" : 9900355,
		"snippet" : "            Resolve-CircularReference -Hash $value\n        } elseif ($value -is [Array] -or $value -is [System.Collections.IList]) {\n            $values = @(foreach ($v in $value) {\n                if ($v -is [System.Collections.IDictionary]) {\n                    Resolve-CircularReference -Hash $v\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/sanity\/validate-modules\/validate_modules\/ps_argspec.ps1"
	},
	{
		"id" : 9900358,
		"snippet" : "                $Hash[$key] = 'raw'\n            } else {\n                $Hash[$key] = $value.ToString()  # Shouldn't ever happen but just in case.\n            }\n        }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/sanity\/validate-modules\/validate_modules\/ps_argspec.ps1"
	},
	{
		"id" : 9900893,
		"snippet" : "        } catch { Start-Sleep -Second 5 }\n    } until ($stop)\n\n    # create the Port Mapper rule file that contains our forwarded ports\n    $fs = [System.IO.File]::Create($pmapper_config)\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/windows-httptester.ps1"
	},
	{
		"id" : 9900900,
		"snippet" : "\nWrite-Verbose -Message \"Wait for current script at '$PSCommandPath' to be deleted before running cleanup\"\n$fsw = New-Object -TypeName System.IO.FileSystemWatcher\n$fsw.Path = Split-Path -Path $PSCommandPath -Parent\n$fsw.Filter = Split-Path -Path $PSCommandPath -Leaf\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/windows-httptester.ps1"
	},
	{
		"id" : 9900910,
		"snippet" : "        try {\n            Write-Verbose -Message \"Cleanup temporary files for Port Mapper at '$pmapper_folder' - Attempt: $attempts\"\n            Remove-Item -Path $pmapper_folder -Force -Recurse\n            break\n        } catch {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/windows-httptester.ps1"
	},
	{
		"id" : 9900959,
		"snippet" : "# a 10-year valid certificate.\n#\n# Use option -ForceNewSSLCert if the system has been SysPreped and a new\n# SSL Certificate must be forced on the WinRM Listener when re-running this\n# script. This is necessary when a new SID and CN name is created.\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9900998,
		"snippet" : "\n    If ($add_rule) {\n        $fw.Rules.Add($rule)\n    }\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9901012,
		"snippet" : "  If ($SkipNetworkProfileCheck) {\n    Write-Verbose \"Enabling PS Remoting without checking Network profile.\"\n    Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop\n    Write-Log \"Enabled PS Remoting without checking Network profile.\"\n  }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9901017,
		"snippet" : "        Remove-ItemProperty -Path $token_path -Name $token_prop_name\n    }\n    New-ItemProperty -Path $token_path -Name $token_prop_name -Value 1 -PropertyType DWORD > $null\n}\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9901023,
		"snippet" : "    Write-Verbose \"SSL listener is already active.\"\n\n    # Force a new SSL cert on Listener if the $ForceNewSSLCert\n    If ($ForceNewSSLCert)\n    {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9901044,
		"snippet" : "{\n    Write-Verbose \"HTTP: Disabled | HTTPS: Enabled\"\n}\nElseIf ($httpResult -and !$httpsResult)\n{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/lib\/ansible_test\/_data\/setup\/ConfigureRemotingForAnsible.ps1"
	},
	{
		"id" : 9911585,
		"snippet" : "        }\n\n        $lineSplit = $line.Split(':', 2)\n        if ($lineSplit.Length -eq 2) {\n            $k = $lineSplit[0].Trim()\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911593,
		"snippet" : "    [PSCustomObject]$info\n}\n\n$tests = [Ordered]@{\n    \"Props on service created by New-Service\" = {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911612,
		"snippet" : "        try {\n            $null = New-Object -TypeName Ansible.Service.Service -ArgumentList 'fake_service'\n        } catch [Ansible.Service.ServiceManagerException] {\n            # 1060 == ERROR_SERVICE_DOES_NOT_EXIST\n            $_.Exception.Message -like '*Win32ErrorCode 1060 - 0x00000424*' | Assert-Equals -Expected $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911643,
		"snippet" : "        $service.LoadOrderGroup | Assert-Equals -Expected \"my group\"\n        $actual.LOAD_ORDER_GROUP | Assert-Equals -Expected \"my group\"\n\n        $null = Invoke-Sc -Action config -Name $serviceName -Arguments @{group=\"\"}\n        $service.Refresh()\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911661,
		"snippet" : "\n        $gmsaName = [System.Security.Principal.NTAccount]'gMSA$@DOMAIN.LOCAL'  # Make sure this is UPN.\n        $gmsaSid = $gmsaName.Translate([System.Security.Principal.SecurityIdentifier])\n        $gmsaNetlogon = $gmsaSid.Translate([System.Security.Principal.NTAccount])\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911675,
		"snippet" : "        $service.FailureActions = $newAction\n\n        $actual = Invoke-Sc -Action qfailure -Name $serviceName\n        $actual.'RESET_PERIOD (in seconds)' | Assert-Equals -Expected 86400\n        $actual.REBOOT_MESSAGE | Assert-Equals -Expected 'Reboot msg'\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911695,
		"snippet" : "    \"Modify FailureActionsOnNonCrashFailures\" = {\n        $service = New-Object -TypeName Ansible.Service.Service -ArgumentList $serviceName\n        $service.FailureActionsOnNonCrashFailures = $true\n\n        $actual = Invoke-Sc -Action qfailureflag -Name $serviceName\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911711,
		"snippet" : "                    Type = [Ansible.Service.TriggerDataType]::String\n                    Data = 'my named pipe'\n                }\n            },\n            [Ansible.Service.Trigger]@{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9911742,
		"snippet" : "\n        $actual[3].Type | Assert-Equals -Expected ([Ansible.Service.TriggerType]::Custom)\n        $actual[3].Action | Assert-Equals -Expected ([Ansible.Service.TriggerAction]::ServiceStart)\n        $actual[3].SubType = [Guid]'435a1742-22c5-4234-9db3-e32dafde695c'\n        $actual[3].DataItems.Count | Assert-Equals -Expected 2\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Service\/library\/ansible_service_tests.ps1"
	},
	{
		"id" : 9912343,
		"snippet" : "    {\n        public static string GetString(bool error)\n        {\n            if (error)\n                throw new Exception(\"error\");\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.AddType\/library\/add_type_test.ps1"
	},
	{
		"id" : 9912395,
		"snippet" : "#elif AMD64\n            return 8;\n#else\n            return 0;\n#endif\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.AddType\/library\/add_type_test.ps1"
	},
	{
		"id" : 9912398,
		"snippet" : "#!powershell\n\n#AnsibleRequires -CSharpUtil Ansible.Basic\n\n$module = [Ansible.Basic.AnsibleModule]::Create($args, @{})\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912432,
		"snippet" : "            _ansible_check_mode = $true\n            _ansible_debug = $true\n            _ansible_diff = $true\n            _ansible_keep_remote_files = $true\n            _ansible_module_name = \"ansible_basic_tests\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912444,
		"snippet" : "                    type = \"dict\"\n                    apply_defaults = $true\n                    options = @{\n                        int_type = @{type = \"int\"}\n                        str_type = @{type = \"str\"; default = \"str_sub_type\"}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912504,
		"snippet" : "        } catch [System.Management.Automation.RuntimeException] {\n            $failed = $true\n            $_.Exception.Message | Assert-Equals -Expected \"exit: 0\"\n            $actual = [Ansible.Basic.AnsibleModule]::FromJson($_.Exception.InnerException.Output)\n        }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912507,
		"snippet" : "        $actual.invocation | Assert-DictionaryEquals -Expected @{module_args = $expected_module_args}\n    }\n\n    \"Parse module args with case insensitive input\" = {\n        $spec = @{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912529,
		"snippet" : "                    password2 = \"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER\"\n                    dict = @{\n                        dict = @{\n                            pass = \"plain\"\n                            hide = \"VALUE_SPECIFIED_IN_NO_LOG_PARAMETER\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912561,
		"snippet" : "        }\n\n        $m = [Ansible.Basic.AnsibleModule]::Create(@(), $spec)\n\n        $failed = $false\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912587,
		"snippet" : "                    msg = \"Alias 'alias5' is deprecated. See the module docs for more information\"\n                    date = \"2020-03-12\"\n                    collection_name = $null\n                },\n                @{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912656,
		"snippet" : "            invocation = @{\n                module_args = @{}\n            }\n            failed = $true\n            msg = \"fail message\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912705,
		"snippet" : "            _ansible_invalid = \"invalid\"\n        }\n        $failed = $false\n        try {\n            $null = [Ansible.Basic.AnsibleModule]::Create(@(), @{})\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912713,
		"snippet" : "        Set-Variable -Name complex_args -Scope Global -Value @{\n            _ansible_remote_tmp = $remote_tmp.ToString()\n        }\n        $m = [Ansible.Basic.AnsibleModule]::Create(@(), @{})\n        (Test-Path -LiteralPath $remote_tmp -PathType Container) | Assert-Equals -Expected $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912737,
		"snippet" : "        $failed | Assert-Equals -Expected $true\n\n        $expected_msg = \"internal error: argument spec entry contains an invalid key 'invalid', valid keys: apply_defaults, \"\n        $expected_msg += \"aliases, choices, default, deprecated_aliases, elements, mutually_exclusive, no_log, options, \"\n        $expected_msg += \"removed_in_version, removed_at_date, removed_from_collection, required, required_by, required_if, \"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912741,
		"snippet" : "                        }\n                    }\n                }\n            }\n        }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912749,
		"snippet" : "        $expected_msg = \"internal error: argument spec for 'apply_defaults' did not match expected \"\n        $expected_msg += \"type System.Boolean: actual type System.String\"\n\n        $actual.Keys.Count | Assert-Equals -Expected 3\n        $actual.failed | Assert-Equals -Expected $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912768,
		"snippet" : "    \"Invalid deprecated aliases entry - no name (nested)\" = {\n        $spec = @{\n            options = @{\n                option_key = @{\n                    type = \"dict\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912770,
		"snippet" : "                                @{version = \"2.10\"}\n                            )\n                        }\n                    }\n                }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912776,
		"snippet" : "                    aliases = ,\"alias_name\"\n                    deprecated_aliases = @(\n                        @{\n                            name = \"alias_name\"\n                            date = [DateTime]\"2020-03-10\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912786,
		"snippet" : "            $failed = $true\n            $_.Exception.Message | Assert-Equals -Expected \"exit: 1\"\n            $actual = [Ansible.Basic.AnsibleModule]::FromJson($_.Exception.InnerException.Output)\n        }\n        $failed | Assert-Equals -Expected $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912789,
		"snippet" : "        $spec = @{\n            options = @{\n                option_key = @{\n                    required = $true\n                    default = \"default value\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912799,
		"snippet" : "\n        $expected_msg = \"Unsupported parameters for (undefined win module) module: another_key, invalid_key. \"\n        $expected_msg += \"Supported parameters include: option_key\"\n\n        $actual.Keys.Count | Assert-Equals -Expected 4\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912805,
		"snippet" : "            $actual = [Ansible.Basic.AnsibleModule]::FromJson($_.Exception.InnerException.Output)\n        }\n        $failed | Assert-Equals -Expected $true\n\n        $expected_msg = \"remote module (undefined win module) does not support check mode\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912833,
		"snippet" : "            option_key = \"ABC\"\n        }\n\n        $m = [Ansible.Basic.AnsibleModule]::Create(@(), $spec)\n        try {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912864,
		"snippet" : "        try {\n            $null = [Ansible.Basic.AnsibleModule]::Create(@(), $spec)\n        } catch [System.Management.Automation.RuntimeException] {\n            $failed = $true\n            $_.Exception.Message | Assert-Equals -Expected \"exit: 1\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912886,
		"snippet" : "    \"Missing required argument subspec\" = {\n        $spec = @{\n            options = @{\n                option_key = @{\n                    type = \"dict\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912900,
		"snippet" : "    \"Required together not set - subspec\" = {\n        $spec = @{\n            options = @{\n                option_key = @{\n                    type = \"dict\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912972,
		"snippet" : "            }\n        }\n    }\n\n    \"Fragment spec with mutual args\" = {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912973,
		"snippet" : "        $spec = @{\n            options = @{\n                option1 = @{ type = \"str\" }\n                option2 = @{ type = \"str\" }\n            }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912991,
		"snippet" : "            options = @{\n                option1 = @{ type = \"str\" }\n            }\n        }\n        $fragment = @{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9912993,
		"snippet" : "            option1 = \"option1\"\n        }\n\n        $failed = $false\n        try {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9913002,
		"snippet" : "                option5 = @{\n                    aliases = [System.Collections.Generic.List[String]]@(\"alias5\")\n                    deprecated_aliases = [System.Collections.Generic.List[Hashtable]]@()\n                }\n            }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9913007,
		"snippet" : "        $failed | Assert-Equals -Expected $true\n\n        $actual.changed | Assert-Equals -Expected $false\n        $actual.deprecations.Count | Assert-Equals -Expected 5\n        foreach ($dep in $actual.deprecations) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Basic\/library\/ansible_basic_tests.ps1"
	},
	{
		"id" : 9913018,
		"snippet" : "#!powershell\n\n#Requires -Module Ansible.ModuleUtils.Legacy\n# Requires -Version 20\n# AnsibleRequires -OSVersion 20\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_exec_wrapper\/library\/test_invalid_requires.ps1"
	},
	{
		"id" : 9913030,
		"snippet" : "#!powershell\n\n#Requires -Module Ansible.ModuleUtils.Legacy\n#Requires -Module Ansible.ModuleUtils.SID\n#Requires -Version 3.0\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_exec_wrapper\/library\/test_all_options.ps1"
	},
	{
		"id" : 9913095,
		"snippet" : "#!powershell\n\n#Requires -Module Ansible.ModuleUtils.Legacy\n#Requires -Module Ansible.ModuleUtils.CamelConversion\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.CamelConversion\/library\/camel_conversion_test.ps1"
	},
	{
		"id" : 9914152,
		"snippet" : "# Test script to make sure the Ansible script module works when arguments are\n# passed to the script.\n\nforeach ($i in $args)\n{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_script\/files\/test_script_with_args.ps1"
	},
	{
		"id" : 9914153,
		"snippet" : "Param(\n[bool]$boolvariable\n)\n\nWrite-Output $boolvariable.GetType().FullName\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_script\/files\/test_script_bool.ps1"
	},
	{
		"id" : 9915417,
		"snippet" : "\n    'All redirection of PUT' = {\n        $params = @{\n            FollowRedirects = 'All'\n            Method = 'PUT'\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.WebRequest\/library\/web_request_test.ps1"
	},
	{
		"id" : 9915445,
		"snippet" : "    'Web request based on module options' = {\n        Set-Variable complex_args -Scope Global -Value @{\n            url = \"https:\/\/$httpbin_host\/redirect\/2\"\n            method = 'GET'\n            follow_redirects = 'safe'\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.WebRequest\/library\/web_request_test.ps1"
	},
	{
		"id" : 9915455,
		"snippet" : "    }\n}\n\n# setup and teardown should favour native tools to create and delete the service and not the util we are testing.\nforeach ($testImpl in $tests.GetEnumerator()) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.WebRequest\/library\/web_request_test.ps1"
	},
	{
		"id" : 9915620,
		"snippet" : "# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_ping\/library\/win_ping_throw.ps1"
	},
	{
		"id" : 9915621,
		"snippet" : "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http:\/\/www.gnu.org\/licenses\/>.\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_ping\/library\/win_ping_throw.ps1"
	},
	{
		"id" : 9915622,
		"snippet" : "\n# POWERSHELL_COMMON\n\nthrow\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_ping\/library\/win_ping_throw.ps1"
	},
	{
		"id" : 9916881,
		"snippet" : "#Requires -Module Ansible.ModuleUtils.Recursive1\n#Requires -Module Ansible.ModuleUtils.Recursive3\n\nFunction Get-Test2 {\n    <#\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_module_utils\/module_utils\/Ansible.ModuleUtils.Recursive2.psm1"
	},
	{
		"id" : 9920607,
		"snippet" : "        [Bool] $BooleanParam,\n        [Bool[]] $BooleanArrayParam,\n        [Char] $CharParam,\n        [Char[]] $CharArrayParam,\n        [Single] $SingleParam,\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_dsc\/files\/xTestDsc\/1.0.0\/DSCResources\/ANSIBLE_xTestResource\/ANSIBLE_xTestResource.psm1"
	},
	{
		"id" : 9920608,
		"snippet" : "        [Single[]] $SingleArrayParam,\n        [Double] $DoubleParam,\n        [Double[]] $DoubleArrayParam,\n        [DateTime] $DateTimeParam,\n        [DateTime[]] $DateTimeArrayParam,\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_dsc\/files\/xTestDsc\/1.0.0\/DSCResources\/ANSIBLE_xTestResource\/ANSIBLE_xTestResource.psm1"
	},
	{
		"id" : 9921917,
		"snippet" : "            $actual_value = $Actual[$i]\n            $expected_value = $Expected[$i]\n            Assert-Equals -Actual $actual_value -Expected $expected_value\n        }\n        $matched = $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.Backup\/library\/backup_file_test.ps1"
	},
	{
		"id" : 9921928,
		"snippet" : "        $parent_dir | Assert-Equals -Expected $tmp_dir\n        ($backup_file -match \"^file\\.txt\\.$pid\\.\\d{8}-\\d{6}\\.bak$\") | Assert-Equals -Expected $true\n        (Get-Content -LiteralPath $actual -Raw) | Assert-Equals -Expected \"$content`r`n\"\n    }\n}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.Backup\/library\/backup_file_test.ps1"
	},
	{
		"id" : 9921929,
		"snippet" : "\nforeach ($test_impl in $tests.GetEnumerator()) {\n    $test = $test_impl.Key\n    &$test_impl.Value\n}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.Backup\/library\/backup_file_test.ps1"
	},
	{
		"id" : 9922327,
		"snippet" : "        }\n        \"(.+?)\\s*=(.*)\" {\n            $name = $matches[1].Trim()\n            $value = $matches[2].Trim()\n            if ($value -match \"^\\d+$\") {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_security_policy\/library\/test_win_security_policy.ps1"
	},
	{
		"id" : 9922330,
		"snippet" : "}\n\n$secedit_ini_path = [IO.Path]::GetTempFileName()\n&SecEdit.exe \/export \/cfg $secedit_ini_path \/quiet\n$secedit_ini = ConvertFrom-Ini -file_path $secedit_ini_path\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/incidental_win_security_policy\/library\/test_win_security_policy.ps1"
	},
	{
		"id" : 9923756,
		"snippet" : "            $h_token.IsClosed | Assert-Equals -Expected $false\n            $h_token.IsInvalid | Assert-Equals -Expected $false\n\n            $actual_user = [Ansible.AccessToken.TokenUtil]::GetTokenUser($h_token)\n            $actual_user | Assert-Equals -Expected $current_user\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.AccessToken\/library\/ansible_access_token_tests.ps1"
	},
	{
		"id" : 9923801,
		"snippet" : "                try {\n                    $actual_linked = [Ansible.AccessToken.TokenUtil]::GetTokenLinkedToken($h_token)\n                    try {\n                        $actual_linked.IsClosed | Assert-Equals -Expected $false\n                        $actual_linked.IsInvalid | Assert-Equals -Expected $false\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.AccessToken\/library\/ansible_access_token_tests.ps1"
	},
	{
		"id" : 9923816,
		"snippet" : "        try {\n            [Ansible.AccessToken.TokenUtil]::LogonUser(\"fake-user\", \"fake-domain\", \"fake-pass\", \"Network\", \"Default\")\n        } catch [Ansible.AccessToken.Win32Exception] {\n            $failed = $true\n            $_.Exception.Message.Contains(\"Failed to logon fake-domain\\fake-user\") | Assert-Equals -Expected $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.AccessToken\/library\/ansible_access_token_tests.ps1"
	},
	{
		"id" : 9924303,
		"snippet" : "\n    internal class NativeMethods\n    {\n        [DllImport(\"kernel32.dll\", SetLastError = true)]\n        public static extern bool CloseHandle(\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924342,
		"snippet" : "        }\n\n        private void SetTokenMandatoryLabel(SafeNativeHandle hToken)\n        {\n            NativeHelpers.TokenInformationClass tokenClass = NativeHelpers.TokenInformationClass.TokenIntegrityLevel;\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924383,
		"snippet" : "    \"Runas with string stdin\" = {\n        $expected = \"input value`r`n`r`n\"\n        $actual = [Ansible.Become.BecomeUtil]::CreateProcessAsUser($admin_user, $become_pass, 0, \"Interactive\", $null,\n            'powershell.exe [System.Console]::In.ReadToEnd()', $null, $null, \"input value\")\n        $actual.StandardOut | Assert-Equals -Expected $expected\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924399,
		"snippet" : "        $stdout.LogonType | Assert-Equals -Expected \"Interactive\"\n        $stdout.ProfileLoaded | Assert-Equals -Expected $true\n        $stdout.UserSid.Value | Assert-Equals -Expected $standard_user_sid\n        $stdout.MandatoryLabelSid.Value | Assert-Equals -Expected $medium_integrity_sid\n    }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924425,
		"snippet" : "        }\n        $actual = [Ansible.Become.BecomeUtil]::CreateProcessAsUser($standard_user, [NullString]::Value, \"WithProfile\",\n            \"Network\", $null, \"powershell.exe -NoProfile -\", $tmp_dir, $null, $test_whoami + \"`r`n\")\n        $actual.StandardError | Assert-Equals -Expected \"\"\n        $actual.ExitCode | Assert-Equals -Expected 0\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924456,
		"snippet" : "            \"NewCredentials\", $null, \"powershell.exe -NoProfile -\", $tmp_dir, $null, $test_whoami + \"`r`n\")\n        $actual.StandardError | Assert-Equals -Expected \"\"\n        $actual.ExitCode | Assert-Equals -Expected 0\n\n        $stdout = ConvertFrom-Json -InputObject $actual.StandardOut\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Become\/library\/ansible_become_tests.ps1"
	},
	{
		"id" : 9924500,
		"snippet" : "Assert-Equals -actual $junction_point_result.PrintName -expected $folder_target\nAssert-Equals -actual $junction_point_result.TargetPath -expected $folder_target\nAssert-Equals -actual $junction_point_result.AbsolutePath -expected $folder_target\nAssert-Equals -actual $junction_point_result.HardTargets -expected $null\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.LinkUtil\/library\/symbolic_link_test.ps1"
	},
	{
		"id" : 9924502,
		"snippet" : "Assert-Equals -actual $hardlink_result.PrintName -expected $null\nAssert-Equals -actual $hardlink_result.TargetPath -expected $null\nAssert-Equals -actual $hardlink_result.AbsolutePath -expected $null\nif ($hardlink_result.HardTargets[0] -ne $hardlink_path -and $hardlink_result.HardTargets[1] -ne $hardlink_path) {\n    Assert-True -expression $false -message \"file $hardlink_path is not a target of the hard link\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.LinkUtil\/library\/symbolic_link_test.ps1"
	},
	{
		"id" : 9924505,
		"snippet" : "\n# check if broken symbolic link still works\nRemove-Item -LiteralPath $folder_target -Force | Out-Null\n$broken_link_result = Get-Link -link_path $symlink_folder_path\nAssert-Equals -actual $broken_link_result.Type -expected \"SymbolicLink\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.LinkUtil\/library\/symbolic_link_test.ps1"
	},
	{
		"id" : 9924506,
		"snippet" : "Assert-Equals -actual $broken_link_result.SubstituteName -expected \"\\??\\$folder_target\"\nAssert-Equals -actual $broken_link_result.PrintName -expected $folder_target\nAssert-Equals -actual $broken_link_result.TargetPath -expected $folder_target\nAssert-Equals -actual $broken_link_result.AbsolutePath -expected $folder_target\nAssert-Equals -actual $broken_link_result.HardTargets -expected $null\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.LinkUtil\/library\/symbolic_link_test.ps1"
	},
	{
		"id" : 9924922,
		"snippet" : "# Copyright (c) 2020 Ansible Project\n# # Simplified BSD License (see licenses\/simplified_bsd.txt or https:\/\/opensource.org\/licenses\/BSD-2-Clause)\n\nFunction Get-PSUtilSpec {\n    <#\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/ansible-test-docker\/ansible_collections\/ns\/col\/plugins\/module_utils\/PSUtil.psm1"
	},
	{
		"id" : 9924923,
		"snippet" : "    .SYNOPSIS\n    Shared util spec test\n    #>\n    @{\n        options = @{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/ansible-test-docker\/ansible_collections\/ns\/col\/plugins\/module_utils\/PSUtil.psm1"
	},
	{
		"id" : 9925592,
		"snippet" : "#!powershell\n\n#AnsibleRequires -CSharpUtil Ansible.Basic\n#Ansiblerequires -CSharpUtil Ansible.Privilege\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Privilege\/library\/ansible_privilege_tests.ps1"
	},
	{
		"id" : 9925599,
		"snippet" : "        $module.Result.line = $call_stack.ScriptLineNumber\n        $module.Result.method = $call_stack.Position.Text\n        $module.FailJson(\"AssertionError: actual != expected\")\n    }\n}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Privilege\/library\/ansible_privilege_tests.ps1"
	},
	{
		"id" : 9925630,
		"snippet" : "    \"Disable and revert privileges\" = {\n        $current_state = [Ansible.Privilege.PrivilegeUtil]::GetAllPrivilegeInfo($process)\n\n        $previous_state = [Ansible.Privilege.PrivilegeUtil]::DisableAllPrivileges($process)\n        $previous_state.GetType().Name | Assert-Equals -Expected 'Dictionary`2'\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Privilege\/library\/ansible_privilege_tests.ps1"
	},
	{
		"id" : 9925647,
		"snippet" : "        $enabler2 = New-Object -TypeName Ansible.Privilege.PrivilegeEnabler -ArgumentList $true, \"SeTimeZonePrivilege\", \"SeShutdownPrivilege\"\n        $enabler2.Dispose()\n        $actual = [Ansible.Privilege.PrivilegeUtil]::GetAllPrivilegeInfo($process)\n        $actual.SeTimeZonePrivilege -band [Ansible.Privilege.PrivilegeAttributes]::Enabled | Assert-Equals -Expected ([Ansible.Privilege.PrivilegeAttributes]::Enabled)\n        $actual.SeShutdownPrivilege -band [Ansible.Privilege.PrivilegeAttributes]::Enabled | Assert-Equals -Expected ([Ansible.Privilege.PrivilegeAttributes]::Enabled)\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.Privilege\/library\/ansible_privilege_tests.ps1"
	},
	{
		"id" : 9926116,
		"snippet" : "# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/windows-minimal\/library\/win_ping_syntax_error.ps1"
	},
	{
		"id" : 9926166,
		"snippet" : "    $exe_special = Join-Path $tmp_dir -ChildPath \"PrintArgv.exe\"\n    Copy-Item -LiteralPath $exe -Destination $exe_special\n    $actual = Run-Command -command \"`\"$exe_special`\" arg1 arg2 `\"arg 3`\"\"\n} finally {\n    Remove-Item -LiteralPath $tmp_dir -Force -Recurse\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/module_utils_Ansible.ModuleUtils.CommandUtil\/library\/command_util_test.ps1"
	},
	{
		"id" : 9926341,
		"snippet" : "#!powershell\n\n# Copyright: (c) 2018, Ansible Project\n\n#Requires -Module Ansible.ModuleUtils.Legacy\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_async_wrapper\/library\/async_test.ps1"
	},
	{
		"id" : 9926348,
		"snippet" : "\n    If($fail_mode -contains \"exception\") {\n        Throw \"failing via exception\"\n    }\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/integration\/targets\/win_async_wrapper\/library\/async_test.ps1"
	},
	{
		"id" : 9927016,
		"snippet" : "        checksum_algorithm = @{ type='str'; default='sha1'; choices=@( 'md5', 'sha1', 'sha256', 'sha384', 'sha512' ) }\n        follow = @{ type='bool'; default=$false }\n    }\n    supports_check_mode = $true\n}\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_stat.ps1"
	},
	{
		"id" : 9927142,
		"snippet" : "$log_path = [System.IO.Path]::Combine($async_dir, $jid)\n\nIf(-not $(Test-Path $log_path))\n{\n    Fail-Json @{ansible_job_id=$jid; started=1; finished=1} \"could not find job at '$async_dir'\"\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/async_status.ps1"
	},
	{
		"id" : 9927191,
		"snippet" : "#!powershell\n\n# GNU General Public License v3.0+ (see COPYING or https:\/\/www.gnu.org\/licenses\/gpl-3.0.txt)\n\n#Requires -Module Ansible.ModuleUtils.Legacy\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_path.ps1"
	},
	{
		"id" : 9927234,
		"snippet" : "    Remove-Item -Path $secedit_db_path -Force # needs to be deleted for SecEdit.exe \/import to work\n\n    $ini_contents = ConvertTo-Ini -ini $ini\n    Set-Content -Path $secedit_ini_path -Value $ini_contents\n    $result.changed = $true\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_security_policy.ps1"
	},
	{
		"id" : 9927258,
		"snippet" : "#!powershell\n\n# GNU General Public License v3.0+ (see COPYING or https:\/\/www.gnu.org\/licenses\/gpl-3.0.txt)\n\n#AnsibleRequires -CSharpUtil Ansible.Basic\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_ping.ps1"
	},
	{
		"id" : 9927289,
		"snippet" : "\n#Requires -Module Ansible.ModuleUtils.Legacy\n#Requires -Module Ansible.ModuleUtils.Backup\n\n$ErrorActionPreference = 'Stop'\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927296,
		"snippet" : "\nif ($diff_mode) {\n    $result.diff = @{}\n}\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927306,
		"snippet" : "        }\n        $diff += \"+$dest`n\"\n\n        $result.changed = $true\n    }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927312,
		"snippet" : "        $dest_child_path = Join-Path -Path $dest -ChildPath $child_item.Name\n        if ($child_item.PSIsContainer) {\n            $diff += (Copy-Folder -source $child_item.Fullname -dest $dest_child_path)\n        } else {\n            $diff += (Copy-File -source $child_item.Fullname -dest $dest_child_path).diff\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927341,
		"snippet" : "        } elseif (-not (Test-Path -LiteralPath $dirpath -PathType Container)) {\n            $changed_directories += $directory\n        }\n    }\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927354,
		"snippet" : "        # we are just copying a single file to dest\n        $result.operation = 'file_copy'\n\n        $source_basename = (Get-Item -LiteralPath $src -Force).Name\n        $result.original_basename = $source_basename\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927355,
		"snippet" : "\n        if ($dest.EndsWith(\"\/\") -or $dest.EndsWith(\"`\\\")) {\n            $dest = Join-Path -Path $dest -ChildPath (Get-Item -LiteralPath $src -Force).Name\n            $result.dest = $dest\n        } else {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_copy.ps1"
	},
	{
		"id" : 9927449,
		"snippet" : "        minute = $datetime.ToString(\"mm\")\n        month = $datetime.ToString(\"MM\")\n        second = $datetime.ToString(\"ss\")\n        time = $datetime.ToString(\"HH:mm:ss\")\n        tz = ([System.TimeZoneInfo]::Local.Id)\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927457,
		"snippet" : "        ansible_os_product_type = $product_type\n        ansible_os_installation_type = $installation_type\n    }\n}\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927472,
		"snippet" : "\n        $formattednetcfg += $thisadapter\n    }\n\n    $ansible_facts += @{\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927486,
		"snippet" : "\nif($gather_subset.Contains('processor')) {\n    $win32_cs = Get-LazyCimInstance Win32_ComputerSystem\n    $win32_cpu = Get-LazyCimInstance Win32_Processor\n    if ($win32_cpu -is [array]) {\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927487,
		"snippet" : "        # multi-socket, pick first\n        $win32_cpu = $win32_cpu[0]\n    }\n\n    $cpu_list = @( )\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927494,
		"snippet" : "    }\n}\n\nif($gather_subset.Contains('windows_domain')) {\n    $win32_cs = Get-LazyCimInstance Win32_ComputerSystem\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/setup.ps1"
	},
	{
		"id" : 9927682,
		"snippet" : "        Enable-DedupVolume -Volume \"$($volume.DriveLetter):\"\n      } elseif ($state -eq 'absent') {\n        Disable-DedupVolume -Volume \"$($volume.DriveLetter):\"\n      }\n    }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_data_deduplication.ps1"
	},
	{
		"id" : 9927697,
		"snippet" : "#Requires -Module Ansible.ModuleUtils.Legacy\n#Requires -Module Ansible.ModuleUtils.CommandUtil\n#Requires -Module Ansible.ModuleUtils.FileUtil\n\n# TODO: add check mode support\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_shell.ps1"
	},
	{
		"id" : 9927767,
		"snippet" : "        if (-not $CheckedPaths.Add($dir_child.FullName.ToLowerInvariant())) {\n            continue\n        }\n\n        $Module.Result.examined++\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_find.ps1"
	},
	{
		"id" : 9927990,
		"snippet" : "#AnsibleRequires -CSharpUtil Ansible.Basic\n#AnsibleRequires -OSVersion 6.2\n\nSet-StrictMode -Version 2\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_format.ps1"
	},
	{
		"id" : 9928044,
		"snippet" : "#Requires -Module Ansible.ModuleUtils.Legacy\n#Requires -Module Ansible.ModuleUtils.SID\n\n$ErrorActionPreference = 'Stop'\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_user_right.ps1"
	},
	{
		"id" : 9928082,
		"snippet" : "            using (Sid sid = new Sid(sidString))\n            {\n                LSA_UNICODE_STRING[] privileges = new LSA_UNICODE_STRING[1];\n                privileges[0] = InitLsaString(privilege);\n                ret = LsaRemoveAccountRights(lsaHandle, sid.pSid, false, privileges, 1);\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_user_right.ps1"
	},
	{
		"id" : 9928091,
		"snippet" : "        static LSA_UNICODE_STRING InitLsaString(string s)\n        {\n            \/\/ Unicode strings max. 32KB\n            if (s.Length > 0x7ffe)\n                throw new ArgumentException(\"String too long\");\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_user_right.ps1"
	},
	{
		"id" : 9928096,
		"snippet" : "}\n\"@\n\n$original_tmp = $env:TMP\n$env:TMP = $_remote_tmp\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_user_right.ps1"
	},
	{
		"id" : 9928101,
		"snippet" : "    return $change_result\n}\n\n# C# class we can use to enumerate\/add\/remove rights\n$lsa_helper = New-Object -TypeName Ansible.LsaRightHelper\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_user_right.ps1"
	},
	{
		"id" : 9928144,
		"snippet" : "\n    [Flags]\n    public enum UserFlags : uint\n    {\n        LOGON_OPTIMIZED = 0x4000,\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928180,
		"snippet" : "            LSA_UNICODE_STRING[] SystemName,\n            ref LSA_OBJECT_ATTRIBUTES ObjectAttributes,\n            DesiredAccess AccessMask,\n            out IntPtr PolicyHandle);\n\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928184,
		"snippet" : "            public IntPtr SecurityDescriptor;\n            public IntPtr SecurityQualityOfService;\n        }\n\n        public LsaHandle(DesiredAccess desiredAccess)\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928200,
		"snippet" : "        }\n\n        public Sid(SecurityIdentifier sid)\n        {\n            SetSidInfo(sid);\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928210,
		"snippet" : "            {\n                AccountName = lpName.ToString();\n                DomainName = referencedDomainName.ToString();\n                SidType = peUse;\n            }\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928225,
		"snippet" : "                if ((luidAndAttribute.Attributes & SE_PRIVILEGE_ENABLED) == SE_PRIVILEGE_ENABLED)\n                    state = \"enabled\";\n                if ((luidAndAttribute.Attributes & SE_PRIVILEGE_ENABLED_BY_DEFAULT) == SE_PRIVILEGE_ENABLED_BY_DEFAULT)\n                    state = \"enabled-by-default\";\n                privilegeInfo.Add(privName.ToString(), state);\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928243,
		"snippet" : "        {\n            UInt32 res;\n            ArrayList rights = new ArrayList();\n            IntPtr userRightsPointer = IntPtr.Zero;\n            UInt64 countOfRights = 0;\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	},
	{
		"id" : 9928245,
		"snippet" : "            {\n                LSA_UNICODE_STRING[] userRights = new LSA_UNICODE_STRING[countOfRights];\n                PtrToStructureArray(userRights, userRightsPointer.ToInt64());\n                rights = new ArrayList();\n                foreach (LSA_UNICODE_STRING right in userRights)\n",
		"language" : "PowerShell",
		"repo_file_name" : "ansible\/ansible\/test\/support\/windows-integration\/plugins\/modules\/win_whoami.ps1"
	}
]}
